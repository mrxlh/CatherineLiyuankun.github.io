<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岚</title>
  <icon>https://www.gravatar.com/avatar/0e57272b72bf1a283c89417a9bc99517</icon>
  <subtitle>Talk to myself.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://catherineliyuankun.github.io/"/>
  <updated>2020-02-05T22:13:44.429Z</updated>
  <id>https://catherineliyuankun.github.io/</id>
  
  <author>
    <name>Yuankun Li</name>
    <email>muzilan1@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>text-overflow: ellipsis多行文本溢出...css/js方法全总结</title>
    <link href="https://catherineliyuankun.github.io/text-overflow-ellipsis%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA-css-js%E6%96%B9%E6%B3%95%E5%85%A8%E6%80%BB%E7%BB%93.html"/>
    <id>https://catherineliyuankun.github.io/text-overflow-ellipsis多行文本溢出-css-js方法全总结.html</id>
    <published>2020-02-05T21:23:29.000Z</published>
    <updated>2020-02-05T22:13:44.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多行显示并在最后一行截断文字？">多行显示并在最后一行截断文字？</h1><hr><p>text-overflow基本知识请看上篇文章：<br><a href="../text-overflow-ellipsis-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%94%9F%E6%95%88%EF%BC%9F">text-overflow: ellipsis;什么时候可能不生效？</a></p><p>单行文字我们为了能够截断文字，使用了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">white-space: nowrap; // 强制文本在一行显示</span><br></pre></td></tr></table></figure><p>如果我确实有多行显示的需求呢？怎么实现？<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/text-overflow-ellipsis-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%94%9F%E6%95%88%EF%BC%9F/multiline%20ellipsis.png" alt="multiline例子图片"></p><h1 id="方法1-webkit-line-clamp-property">方法1 -Webkit-line-clamp property</h1><p><strong>优点</strong>: 最简单的方法<br><strong>缺点</strong>: 但是很遗憾，它不支持跨浏览器（在Firefox和Internet Explorer中不起作用）。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-line-clamp" target="_blank" rel="noopener">-webkit-line-clamp</a> CSS 属性 可以把 块容器 中的内容限制为指定的行数.</p></blockquote><blockquote><p>它只有在 display 属性设置成 -webkit-box 或者 -webkit-inline-box 并且 -webkit-box-orient 属性设置成 vertical时才有效果</p></blockquote><blockquote><p>在大部分情况下,也需要设置 overflow 属性为 hidden, 否则,里面的内容不会被裁减,并且在内容显示为指定行数后还会显示省略号(ellipsis ).</p></blockquote><blockquote><p>当他应用于锚(anchor)元素时,截取动作可以发生在文本中间,而不必在末尾.</p></blockquote><p>使用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block-with-text</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法2-text-overflow-o-ellipsis-lastline">方法2 Text-overflow: -o-ellipsis-lastline</h1><p>从10.60版开始，Opera增加了在多行块上剪切文本的功能。 老实说，我从未尝试过，理论上只在Opera 10.6以后可以使用，不建议使用。</p><h1 id="方法3-javascript">方法3 JavaScript</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#block-with-text</span> &#123; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3.6em</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ellipsizeMultiLineText</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="keyword">var</span> words = element.innerHTML.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">while</span>(element.scrollHeight &gt; element.offsetHeight) &#123;</span><br><span class="line">        words.pop();</span><br><span class="line">        element.innerHTML = words.join(<span class="string">' '</span>) + <span class="string">'...'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">ellipsizeMultiLineText(<span class="string">'block-with-text'</span>);</span><br></pre></td></tr></table></figure><h1 id="方法4-纯css解决-跨浏览器">方法4 纯CSS解决 &amp; 跨浏览器</h1><h2 id="优点">优点</h2><ol><li>纯CSS</li><li>自适应 Responsive</li><li>改变大小后或者 字体加载事件后 不需要重新计算</li><li>跨浏览器</li></ol><h2 id="缺点">缺点</h2><ol><li>文字小于指定行数的时候，我们需要一个背景色来掩盖‘…’</li><li>我们需要空间来放‘…’, 而且如果父节点<code>overflow: hidden</code> 或者 <code>overflow: auto</code> 我们需要去掉style <code>margin-right: -1em;</code>.</li></ol><h2 id="实现方法">实现方法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* styles for '...' */</span> </span><br><span class="line"><span class="selector-class">.block-with-text</span> &#123;</span><br><span class="line">  <span class="comment">/* hide text if it more than N lines  */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/* for set '...' in absolute position */</span></span><br><span class="line">  <span class="attribute">position</span>: relative; </span><br><span class="line">  <span class="comment">/* use this value to count block height */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="comment">/* max-height = line-height (1.2) * lines max number (3) */</span></span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">3.6em</span>; </span><br><span class="line">  <span class="comment">/* fix problem when last visible word doesn't adjoin right side  */</span></span><br><span class="line">  <span class="attribute">text-align</span>: justify;  </span><br><span class="line">  <span class="comment">/* place for '...' */</span></span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* create the ... */</span></span><br><span class="line"><span class="selector-class">.block-with-text</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="comment">/* points in the end */</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">'...'</span>;</span><br><span class="line">  <span class="comment">/* absolute position */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/* set position to right bottom corner of block */</span></span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* hide ... if we have text, which is less than or equal to max lines */</span></span><br><span class="line"><span class="selector-class">.block-with-text</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="comment">/* points in the end */</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="comment">/* absolute position */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/* set position to right bottom corner of text */</span></span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* set width and height */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.2em</span>;</span><br><span class="line">  <span class="comment">/* bg color = bg color under block */</span></span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现原理">实现原理</h2><ol><li>大于3行时<br>:before 的内容&quot;…&quot; 在右下角</li></ol><p><img src="http://static.hackingui.com.s3.amazonaws.com/2015/08/more-3-lines.jpg" alt="大于3行时1"></p><p>文字被justify （text-align: justify;）不会看到文字与&quot;…&quot;之间有空隙。<br><img src="http://static.hackingui.com.s3.amazonaws.com/2015/08/more-3-lines-nonjustified.jpg" alt="大于3行时2"></p><ol start="2"><li><p>小于3行时<br>看不到&quot;…&quot;<br><img src="http://static.hackingui.com.s3.amazonaws.com/2015/08/more-3-lines.jpg" alt="小于3行时"></p></li><li><p>等于3行时<br>看不到&quot;…&quot;<br><img src="http://static.hackingui.com.s3.amazonaws.com/2015/08/more-3-lines.jpg" alt="等于3行时"></p></li></ol><h1 id="方法5-纯scss解决-跨浏览器">方法5 纯SCSS解决 &amp; 跨浏览器</h1><p>因为方法4中的缺点，所以写了个SCSS mixin。这样的话使用起来也更方便，也有复用性。</p><p><strong>CodePen</strong> <a href="https://codepen.io/catherineliyuankun/pen/poJzLKx" target="_blank" rel="noopener">multiline例子链接</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"block-with-text"</span>&gt;</span>The Hitch Hiker's Guide to the Galaxy has a few things to say on the subject of towels. A towel, it says, is about the most massivelyuseful thing an interstellar hitch hiker can have. Partly it has great practical value - you can wrap it around you for warmth as you bound across the cold moons of  Jaglan Beta.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"block-with-text"</span>&gt;</span>Small text, less then one row. Without dottes.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"block-with-text"</span> <span class="attr">style</span>=<span class="string">"width: 250px;"</span>&gt;</span>2.5 lines example: A towel is about the most massively useful thing an interstellar hitch hiker can have<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">400</span> <span class="number">14px</span>/<span class="number">1.2em</span> sans-serif; </span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* mixin for multiline */</span></span><br><span class="line">@<span class="keyword">mixin</span> multiLineEllipsis($lineHeight: <span class="number">1.2em</span>, $lineCount: <span class="number">1</span>, $bgColor: white)&#123;</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">  line-height: $lineHeight;</span><br><span class="line">  max-height: $lineHeight * $lineCount; </span><br><span class="line">  <span class="selector-tag">text-align</span>: <span class="selector-tag">justify</span>;</span><br><span class="line">  <span class="selector-tag">margin-right</span>: <span class="selector-tag">-1em</span>;</span><br><span class="line">  <span class="selector-tag">padding-right</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'...'</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.2em</span>;</span><br><span class="line">    <span class="attribute">background</span>: $bgColor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block-with-text</span> &#123;</span><br><span class="line">  @include multiLineEllipsis($lineHeight: 1.2em, $lineCount: 2, $bgColor: white);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="the-reference-link">The reference link</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow" target="_blank" rel="noopener">MDN text-overflow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多行显示并在最后一行截断文字？&quot;&gt;多行显示并在最后一行截断文字？&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;text-overflow基本知识请看上篇文章：&lt;br&gt;
&lt;a href=&quot;../text-overflow-ellipsis-%E4%BB%80%E4%B9%88%E6%
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="CSS" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/CSS/"/>
    
    
      <category term="text-overflow" scheme="https://catherineliyuankun.github.io/tags/text-overflow/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler Everywhere for MAC OS without Mono</title>
    <link href="https://catherineliyuankun.github.io/Fiddler-Everywhere-for-MAC-OS-without-Mono.html"/>
    <id>https://catherineliyuankun.github.io/Fiddler-Everywhere-for-MAC-OS-without-Mono.html</id>
    <published>2020-02-05T19:10:02.000Z</published>
    <updated>2020-02-05T20:33:00.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fiddler-版本历史">Fiddler 版本历史</h1><p>Fiddler著名的抓包工具，就不多说了。</p><p>在Mac上使用Fiddler也是血泪史，2016年出过Fiddler for OS X Beta 1, 必须通过Mono才可以在Mac上使用。但是在mac上使用是非常不稳定, 有非常多的问题.</p><p>现在终于有”Fiddler Everywhere“ 版本，可以直接在Mac上安装了！</p><p>因为之前他的mac版本非常不好用，后来就使用了其他的软件，像Charles，wireshark。下回可以写一篇这几个软件的对比文章。<br>2018年底就出来了Beta版本，我竟然一直不知道!  在网上随便一搜，知乎上、大家的博客写的也都是原来的2016年出的Fiddler for OS X的安装教程。所以索性就写一篇关于Fiddler的回顾，mark下。</p><table><thead><tr><th>时间</th><th>版本</th><th>系统</th><th>特性</th></tr></thead><tbody><tr><td>2007.1.5</td><td>Fiddler v1.x</td><td>Windows</td><td><a href="https://www.telerik.com/support/whats-new/fiddler/release-history" target="_blank" rel="noopener">Release History</a></td></tr><tr><td>2016年底</td><td>Fiddler for OS X Beta 1 (Mono)</td><td>Mac OS</td><td></td></tr><tr><td>2018.11.8</td><td>Fiddler Everywhere v0.1.0</td><td>Windows, Mac and Linux</td><td><a href="https://www.telerik.com/support/whats-new/fiddler-everywhere/release-history" target="_blank" rel="noopener">Release History</a></td></tr></tbody></table><p>各个版本后来更新的小版本就不列出来了，可以点击Release History查看详细版本。</p><h1 id="新版本：fiddler-everywhere-介绍及下载">新版本：Fiddler Everywhere 介绍及下载</h1><h2 id="fiddler-everywhere-下载">Fiddler Everywhere 下载</h2><p>现在终于有”Fiddler Everywhere“ 版本，可以直接在Mac上安装了！废话不多说，直接上<a href="https://www.telerik.com/download/fiddler-everywhere" target="_blank" rel="noopener">官方下载链接</a>。<br>然后跟安装其他mac软件一样直接安装就行了，简直喜大普奔。<br><a href="https://www.telerik.com/support/whats-new/fiddler-everywhere/release-history" target="_blank" rel="noopener">Release History 版本历史</a>。</p><p>Fiddler使用方法网上一搜有很多，下回有空了再写。</p><h2 id="fiddler-everywhere-介绍">Fiddler Everywhere 介绍</h2><p>官方介绍Fiddler Everywhere的blog: “<a href="https://www.telerik.com/blogs/one-fiddler-to-rule-them-all" target="_blank" rel="noopener">One Fiddler to Rule Them All</a>”</p><p>官方介绍Fiddler Everywhere的blog挑重点翻译过来：</p><blockquote><p>您是否曾一再尝试将Fiddler设置为在Mac或Linux上运行，却又遇到另一个错误？<br>您是否对没有其他选择感到沮丧？</p><p>多年来，将Fiddler移植到Mac和Linux一直是最受欢迎的功能请求之一。在2016年底，我们推出了使用 Mono的Beta版本，但是这种方法的问题和局限性似乎超过了获益。我们已经尝试过，我们已经了解到。</p><p>我们很高兴介绍下一个Fiddler – <a href="https://www.telerik.com/fiddler-everywhere" target="_blank" rel="noopener">Fiddler Everywhere</a>。 Fiddler Everywhere是从零开始构建的，可以在所有主要平台（Windows，Mac和Linux）上运行。这是您所询问的所有内容，以及更多：</p><ol><li><strong>跨平台支持</strong>：<a href="http://xn--Angular-lr4ks95bvki.NET" target="_blank" rel="noopener">基于Angular和.NET</a> Core，它为Mac和Linux用户提供了与Windows用户相同的体验和生产力。</li><li><strong>流畅的用户界面</strong>：自上次修改Fiddler的界面以来，UI的最佳做法已经有了长足发展。我们希望将最新的UI和UX改进引入Fiddler社区。 Kendo UI for Angular团队的同事们支持我们，这不是很好吗？</li><li><strong>完美的用户体验</strong>：无论您是在构建API服务还是管理组织的流量，使用Fiddler都是小菜一碟。</li><li>最重要的是，它是<strong>免费</strong>的。</li></ol><p>我们发布的第一个版本功能有限，但是我们将根据使用情况和您提供的反馈反复添加更多功能。</p><p>但是旧的Fiddler – Windows版Fiddler呢？<br>我们将继续开发该版本，至少直到新的Fiddler具有与之相等的功能为止，并且可能在此之后很长时间。有两个主要原因：1有用 2每个人都喜欢它。</p></blockquote><h1 id="老版本：-fiddler-for-os-x-beta-1-mono">老版本： Fiddler for OS X Beta 1（Mono）</h1><p>官方介绍Fiddler for OS X Beta 1 <a href="https://www.telerik.com/blogs/introducing-fiddler-for-os-x-beta-1" target="_blank" rel="noopener">Introducing Fiddler for OS X Beta 1</a></p><h2 id="安装方法">安装方法</h2><ol><li>如果您的Mac上未安装Mono框架，请<a href="https://www.mono-project.com/download/stable/" target="_blank" rel="noopener">下载并安装</a>。如果已经安装，请更新至最新版本。</li><li>如果您刚刚安装了Mono，请打开Terminal并输入：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Frameworks/Mono.framework/Versions/&lt;Mono版本&gt; / bin / mozroots --import --sync</span><br></pre></td></tr></table></figure><p>比如Mono版本5.10.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Frameworks/Mono.framework/Versions/5.10.1/bin/mozroots --import —sync</span><br></pre></td></tr></table></figure><blockquote><p>Mono框架具有自己的受信任的根证书存储。当前（在Mono版本4.2.4中），在OS X上安装Mono后，此存储仍然为空。Fiddler使用此存储中的证书来验证所访问网站的证书。因此，您需要使用一组普遍信任的根权限填充该存储，以避免Fiddler不断收到证书警告。 mozroots工具从Mozilla LXR导入受信任的权威。</p></blockquote><ol start="3"><li>下载<a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">fiddler-mac.zip</a>解压缩到具有写权限的文件夹。建议Fiddler安装文件夹的完整路径不包含任何Windows路径非法字符。 （目前，某些Fiddler功能（例如各种文件导出或Fiddler脚本）可能无法处理此类路径。）</li><li>打开终端并导航到第3步文件夹。</li><li>在终端中输入<code>mono Fiddler.exe</code></li></ol><h2 id="局限性-已知问题和解决方法">局限性，已知问题和解决方法</h2><ul><li><strong>不稳定的用户界面</strong></li></ul><blockquote><p>用于OS X的Fiddler与Windows的Fiddler具有相同的外观，但是它建立在开源WinForms Mono实现的基础上。该实现的质量明显低于Microsoft WinForms的质量，这会导致不理想的用户体验。当我们意识到在开始使用macOS版本的Fiddler时，我们选择了这种方式，以便我们可以更快地实现对OS X的支持，而不必牺牲Windows的Fiddler路线图，而将我们的未来工作作为基础实际使用情况。</p></blockquote><blockquote><p>对于Beta 1版本，UI中最有问题的区域是调整窗口大小和调整窗口内部元素的大小。通常，这会导致所有受影响元素的重画效果差或拖延。不过，将鼠标悬停或单击受影响的区域通常会解决问题。</p></blockquote><ul><li>当Fiddler正在运行且“解密HTTPS流量”处于打开状态时，Safari无法访问某些受欢迎的网站（Facebook / Twitter / GitHub等）</li></ul><blockquote><p>当前，此效果仅限于Safari，并且只有在您打开Fiddler之前访问该网站时才会发生。清除受影响站点的浏览历史记录（只是历史记录不缓存或cookie）可以解决此问题。</p></blockquote><blockquote><p>我们的初步研究表明，使用TLS版本大于1.0的网站会出现此问题。缺少TLS 1.1和1.2的Mono实现，将Fiddler for macOS限制为仅使用TLS 1.0。不幸的是，Fiddler TLS 1.0连接是在对同一域建立TLS 1.2连接之后出现的，Safari无法接受该域。</p></blockquote><ul><li><p><strong>不支持TLS 1.1和1.2</strong><br>这是Mono框架中TLS实现的当前状态引入的硬限制。因此，OS X的Fiddler目前无法使用这些协议。</p></li><li><p><strong>SSL / TLS握手属性不可用</strong><br>Fiddler for OS X Beta目前无法显示这些内容。这项工作正在进行中。</p></li><li><p><strong>自动更新</strong><br>Fiddler for OS X的初始版本只能手动更新。</p></li><li><p><strong>使用寿命有限</strong><br>此版本的Fiddler for OS X可以使用60天，然后需要进行更新。</p></li></ul><p>所以说知道老版本的缺点，你就知道为什么原来要弃用了。就知道为什么现在要喜大普奔又可以用回来了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fiddler-版本历史&quot;&gt;Fiddler 版本历史&lt;/h1&gt;
&lt;p&gt;Fiddler著名的抓包工具，就不多说了。&lt;/p&gt;
&lt;p&gt;在Mac上使用Fiddler也是血泪史，2016年出过Fiddler for OS X Beta 1, 必须通过Mono才可以在Mac上
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Tools" scheme="https://catherineliyuankun.github.io/categories/TECH/Tools/"/>
    
      <category term="network tools" scheme="https://catherineliyuankun.github.io/categories/TECH/Tools/network-tools/"/>
    
    
      <category term="Promise" scheme="https://catherineliyuankun.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>text-overflow: ellipsis;什么时候可能不生效？</title>
    <link href="https://catherineliyuankun.github.io/text-overflow-ellipsis-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%94%9F%E6%95%88%EF%BC%9F.html"/>
    <id>https://catherineliyuankun.github.io/text-overflow-ellipsis-什么时候可能不生效？.html</id>
    <published>2020-02-04T20:28:48.000Z</published>
    <updated>2020-02-05T21:23:57.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ⅰ-text-overflow-ellipsis-什么时候可能不生效？">Ⅰ text-overflow: ellipsis;什么时候可能不生效？</h1><hr><ol><li><p>设置在width有效的元素上，并且设置必要的width。</p><ul><li>块级元素（block level element） width、height 属性默认有效.[example 1]</li><li>内联元素（inline element 有的人也叫它行内元素）width、height 属性无效。[example 2]<br>可以通过改变display，使得width、height属性有效。</li></ul> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display: block; //inline-block;</span><br></pre></td></tr></table></figure></li><li><p>要想这两个属性起真正的作用，需要配合：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden; // 超出文本的部分不显示</span><br><span class="line">white-space: nowrap; // 强制文本在一行显示</span><br></pre></td></tr></table></figure></li><li><p>在table内td除了满足前两个条件之外。要在table的样式里定义一个属性 <code>table-layout:fixed</code><br>[example 3]</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- example 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divTitle"</span>&gt;</span>div text-overflow: ellipsis;什么时候可能不生效？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- example 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spanTitle"</span>&gt;</span>span text-overflow: ellipsis;什么时候可能不生效？<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- example 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>  <span class="attr">class</span>=<span class="string">"box  ellipsis"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Here is some long content that doesn't fit.Here is some long content that doesn't fit<span class="tag">&lt;/<span class="name">span</span>&gt;</span>A</span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// example 1</span><br><span class="line"><span class="selector-class">.divTitle</span> &#123;</span><br><span class="line">    width: 10px; // or other value</span><br><span class="line">    <span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line">    <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">    <span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// example 2</span><br><span class="line"><span class="selector-class">.spanTitle</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// example 3</span><br><span class="line"><span class="selector-tag">table</span> &#123; </span><br><span class="line">    <span class="attribute">table-layout</span>:fixed; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span> &#123; </span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis; </span><br><span class="line">    <span class="attribute">white-space</span>: nowrap; </span><br><span class="line">    <span class="attribute">overflow</span>: hidden; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><hr><h1 id="ⅱ-text-overflow的不同样式">Ⅱ text-overflow的不同样式</h1><hr><ul><li>clip<br>这个关键字的意思是&quot;在内容区域的极限处截断文本&quot;，因此在字符的中间可能会发生截断。为了能在两个字符过渡处截断，你必须使用一个空字符串值 (’’)(To truncate at the transition between two characters, the empty string value (’’) must be used.)。此为默认值。</li><li>ellipsis<br>这个关键字的意思是“用一个省略号 (’…’, U+2026 HORIZONTAL ELLIPSIS)来表示被截断的文本”。这个省略号被添加在内容区域中，因此会减少显示的文本。如果空间太小到连省略号都容纳不下，那么这个省略号也会被截断。</li><li>string 自定义字符串<br>string用来表示被截断的文本。字符串内容将被添加在内容区域中，所以会减少显示出的文本。如果空间太小到连省略号都容纳不下，那么这个字符串也会被截断。但是这个属性在很多浏览器中都不支持，要谨慎使用。</li></ul><p>最有意思的是，如果结合使用</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">direction:</span> rtl</span><br></pre></td></tr></table></figure><p>可以指定截断文本是在文末还是在开头。</p><p>CodePen <a href="https://codepen.io/catherineliyuankun/pen/gjzLav" target="_blank" rel="noopener">text-overflow例子链接</a><br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/text-overflow-ellipsis-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%94%9F%E6%95%88%EF%BC%9F/text-overflow%E7%9A%84%E4%B8%8D%E5%90%8C%E6%A0%B7%E5%BC%8F.png" alt="text-overflow的不同样式例子图片"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"overflow-visible"</span>&gt;</span>overflow-visible Lorem ipsum dolor sit amet, consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"overflow-clip"</span>&gt;</span>overflow-clip Lorem ipsum dolor sit amet, consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"overflow-ellipsis"</span>&gt;</span>overflow-ellipsis Lorem ipsum dolor sit amet, consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"overflow-ellipsis first"</span>&gt;</span>overflow-ellipsis first Lorem ipsum dolor sit amet, consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"overflow-string"</span>&gt;</span>overflow-string Lorem ipsum dolor sit amet, consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* BOTH of the following are required for text-overflow */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overflow-visible</span> &#123;</span><br><span class="line"><span class="attribute">white-space</span>: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overflow-clip</span> &#123;</span><br><span class="line"><span class="attribute">text-overflow</span>: clip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overflow-ellipsis</span> &#123;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overflow-ellipsis</span><span class="selector-class">.first</span> &#123;</span><br><span class="line"><span class="attribute">direction</span>: rtl;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overflow-string</span> &#123;</span><br><span class="line"><span class="comment">/* Not supported in most browsers, </span></span><br><span class="line"><span class="comment">    see the 'Browser compatibility' section below */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: <span class="string">" [..]"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><hr><h1 id="ⅲ-文首截断？">Ⅲ …文首截断？</h1><hr><p>我们一般都会在文末截断…<br>如果我确实有文首截断的需求呢？怎么实现？</p><h2 id="方法一">方法一</h2><p>结合使用direction可以指定截断文本是在文末还是在开头。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">direction: rtl; // <span class="built_in">at</span> <span class="built_in">right</span> <span class="keyword">end</span> 文末</span><br></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">direction: ltr // <span class="built_in">at</span> <span class="built_in">left</span> <span class="keyword">end</span> 开头</span><br></pre></td></tr></table></figure><p>例子：<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/text-overflow-ellipsis-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%94%9F%E6%95%88%EF%BC%9F/reverse%20ellipsis%201.png" alt="文首截断例子图片"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"overflow-ellipsis"</span>&gt;</span>overflow-ellipsis Lorem ipsum dolor sit amet, consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"overflow-ellipsis first"</span>&gt;</span>overflow-ellipsis first Lorem ipsum dolor sit</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* BOTH of the following are required for text-overflow */</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.overflow-ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overflow-ellipsis</span><span class="selector-class">.first</span> &#123;</span><br><span class="line">  <span class="attribute">direction</span>: rtl;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二">方法二</h2><p>如果方法一在有些浏览器中不支持的话，可以使用：before添加content来实现。</p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/text-overflow-ellipsis-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%94%9F%E6%95%88%EF%BC%9F/reverse%20ellipsis%202.png" alt="文首截断2例子图片"></p><p>CodePen <a href="https://codepen.io/catherineliyuankun/pen/ajGpvV" target="_blank" rel="noopener">reverse ellipsis例子链接</a></p><hr><h1 id="ⅳ-多行显示并在最后一行截断文字？">Ⅳ 多行显示并在最后一行截断文字？</h1><hr><p>上面我们为了能够截断文字，使用了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">white-space: nowrap; // 强制文本在一行显示</span><br></pre></td></tr></table></figure><p>如果我确实有多行显示的需求呢？怎么实现？</p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/text-overflow-ellipsis-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%94%9F%E6%95%88%EF%BC%9F/multiline%20ellipsis.png" alt="multiline例子图片"></p><p>CodePen <a href="https://codepen.io/catherineliyuankun/pen/poJzLKx" target="_blank" rel="noopener">multiline例子链接</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"block-with-text"</span>&gt;</span>The Hitch Hiker's Guide to the Galaxy has a few things to say on the subject of towels. A towel, it says, is about the most massivelyuseful thing an interstellar hitch hiker can have. Partly it has great practical value - you can wrap it around you for warmth as you bound across the cold moons of  Jaglan Beta.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"block-with-text"</span>&gt;</span>Small text, less then one row. Without dottes.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"block-with-text"</span> <span class="attr">style</span>=<span class="string">"width: 250px;"</span>&gt;</span>2.5 lines example: A towel is about the most massively useful thing an interstellar hitch hiker can have<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">400</span> <span class="number">14px</span>/<span class="number">1.2em</span> sans-serif; </span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* mixin for multiline */</span></span><br><span class="line">@<span class="keyword">mixin</span> multiLineEllipsis($lineHeight: <span class="number">1.2em</span>, $lineCount: <span class="number">1</span>, $bgColor: white)&#123;</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">  line-height: $lineHeight;</span><br><span class="line">  max-height: $lineHeight * $lineCount; </span><br><span class="line">  <span class="selector-tag">text-align</span>: <span class="selector-tag">justify</span>;</span><br><span class="line">  <span class="selector-tag">margin-right</span>: <span class="selector-tag">-1em</span>;</span><br><span class="line">  <span class="selector-tag">padding-right</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'...'</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.2em</span>;</span><br><span class="line">    <span class="attribute">background</span>: $bgColor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block-with-text</span> &#123;</span><br><span class="line">  @include multiLineEllipsis($lineHeight: 1.2em, $lineCount: 2, $bgColor: white);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="the-reference-link">The reference link</h1><p><a href="http://hackingui.com/front-end/a-pure-css-solution-for-multiline-text-truncation/" target="_blank" rel="noopener">Pure CSS for multiline truncation with ellipsis</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow" target="_blank" rel="noopener">MDN text-overflow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ⅰ-text-overflow-ellipsis-什么时候可能不生效？&quot;&gt;Ⅰ text-overflow: ellipsis;什么时候可能不生效？&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设置在width有效的元素上，并且设置必要的width。&lt;/p&gt;
&lt;u
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="CSS" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/CSS/"/>
    
    
      <category term="text-overflow" scheme="https://catherineliyuankun.github.io/tags/text-overflow/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript比较两个Array数组/Object的内容是否相同</title>
    <link href="https://catherineliyuankun.github.io/JavaScript%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AAArray%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AE%B9%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C.html"/>
    <id>https://catherineliyuankun.github.io/JavaScript比较两个Array数组的内容是否相同.html</id>
    <published>2020-02-04T17:17:01.000Z</published>
    <updated>2020-02-04T20:23:03.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="why-can-not-use-to-compare-array">Why can not use === to compare Array?</h1><p>复习下javascript包括两个不同类型的值， 最新的 ECMAScript 标准定义了 8 种数据类型:</p><ul><li>基本数据类型(7种原始类型): 是按值访问的, 保存在栈内存（Stack）里, 基本类型的值是不可变的, 基本类型的比较是它们的值的比较。<ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol</li></ul></li><li>引用数据类型 (1种Object类型): 按引用访问的, 保存在堆内存(Heap)中的对象, 引用类型的值是可变的, 引用类型的比较是引用的比较。<ul><li>Object</li><li>Array</li><li>Function</li><li>正则（RegExp）</li><li>日期（Date）</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>b获取的是a值的一份拷贝，虽然两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。b只是保存了a赋值的一个副本，所以，b的改变，对a没有影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = [];    <span class="comment">// 新建一个空数组 obj1</span></span><br><span class="line"><span class="keyword">var</span> obj2 = [];    <span class="comment">// 新建一个空数组 obj2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 == obj2);    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2);   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>因为 obj1 和 obj2 分别引用的是存放在堆内存中的2个不同的对象，故变量 obj1 和 obj2 的值（引用地址）也是不一样的<br>==或===操作符只能比较两个对象是否是同一个实例，也就是是否是同一个对象引用。目前JavaScript没有内置的操作符判断对象的内容是否相同。</p><h1 id="how-to-compare-array">How to compare Array?</h1><h2 id="method-1-transform-array-tostring">Method 1 Transform Array toString</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array1.toString() === array2.toString()</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(array1) === <span class="built_in">JSON</span>.stringify(array2)</span><br></pre></td></tr></table></figure><p>不推荐，原因：</p><ul><li>首先要保证两个数组顺序一致，例如[1, 2] [2, 1] 顺序不一致，但内容相同。</li><li>其次，不是因为转换成字符串类型后才相等。<br>例如array1=[1, 2], array1=[‘1’, ‘2’];<br>array1.toString() === array2.toString() // true</li><li>简单数组[‘1’, ‘2’]，不是嵌套数组[‘1’, ‘2’, [‘1’, ‘2’]]</li></ul><h2 id="method-2-for-string">Method 2 For string[]</h2><p>如果保证：</p><ul><li>不是因为转换成字符串类型后才相等。<br>例如array1=[1, 2], array1=[‘1’, ‘2’];<br>array1.toString() === array2.toString() // true</li><li>简单数组[‘1’, ‘2’]，不是嵌套数组[‘1’, ‘2’, [‘1’, ‘2’]]</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// funtion for simple array string[]</span></span><br><span class="line">isArrayEquals(array1, array2) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!(array1 || array1)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Compare the length</span></span><br><span class="line">    <span class="keyword">if</span> (array1.length != array2.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先排序再转化为string比较</span></span><br><span class="line">    <span class="keyword">if</span> (array1.sort().toString() === array2.sort().toString()) &#123;</span><br><span class="line">    <span class="comment">// if (JSON.stringify(array1.sort()) === JSON.stringify(array2.sort()) ) &#123;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="method-3-for-all-kinds-of-array">Method 3 For all kinds of array</h2><p>适应任何array, 包括嵌套数组。</p><p>for all kinds of array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// prototype 方法</span></span><br><span class="line"><span class="comment">// Warn if overriding existing method</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.prototype.equals) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">"Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.equals = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!array) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.length !== array.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; array[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>[i].equals(array[i])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>[i] !== array[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// funtion for all kinds of array</span></span><br><span class="line">isArrayEquals(array1, array2) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!(array1 || array1)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Compare the length</span></span><br><span class="line">    <span class="keyword">if</span> (array1.length != array2.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">        <span class="comment">// check wheather it's nested arrays</span></span><br><span class="line">        <span class="keyword">if</span> (array1[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; array2[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">            <span class="comment">// Recursion</span></span><br><span class="line">            <span class="keyword">if</span> (!isArrayEquals(array1[i],array2[i]))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;       </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>[i] != array[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="how-to-compare-object">How to compare Object?</h1><p>那么同样的道理怎么比较Object呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.equals = <span class="function"><span class="keyword">function</span>(<span class="params">object2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//For the first loop, we only check for types</span></span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//Check for inherited methods and properties - like .equals itself</span></span><br><span class="line">        <span class="comment">//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty</span></span><br><span class="line">        <span class="comment">//Return false if the return value is different</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Check instance type</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>[propName] != <span class="keyword">typeof</span> object2[propName]) &#123;</span><br><span class="line">            <span class="comment">//Different types =&gt; not equal</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Now a deeper check using other objects property names</span></span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> object2) &#123;</span><br><span class="line">        <span class="comment">//We must check instances anyway, there may be a property that only exists in object2</span></span><br><span class="line">            <span class="comment">//I wonder, if remembering the checked values from the first loop would be faster or not </span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>[propName] != <span class="keyword">typeof</span> object2[propName]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//If the property is inherited, do not check any more (it must be equa if both objects inherit it)</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.hasOwnProperty(propName))</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Now the detail check and recursion</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//This returns the script back to the array comparing</span></span><br><span class="line">        <span class="comment">/**REQUIRES Array.equals**/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>[propName] <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; object2[propName] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                   <span class="comment">// recurse into the nested arrays</span></span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">this</span>[propName].equals(object2[propName]))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>[propName] <span class="keyword">instanceof</span> <span class="built_in">Object</span> &amp;&amp; object2[propName] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">                   <span class="comment">// recurse into another objects</span></span><br><span class="line">                   <span class="comment">//console.log("Recursing to compare ", this[propName],"with",object2[propName], " both named ""+propName+""");</span></span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">this</span>[propName].equals(object2[propName]))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Normal value comparison for strings and numbers</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>[propName] != object2[propName]) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//If everything passed, let's say YES</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reference-links">Reference Links</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="noopener">JavaScript 数据类型和数据结构</a></li><li><a href="https://segmentfault.com/a/1190000006752076" target="_blank" rel="noopener">JavaScript 深入了解基本类型和引用类型的值</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;why-can-not-use-to-compare-array&quot;&gt;Why can not use === to compare Array?&lt;/h1&gt;
&lt;p&gt;复习下javascript包括两个不同类型的值， 最新的 ECMAScript 标准定义了 8 种数据类
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="JS" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/JS/"/>
    
    
      <category term="Array" scheme="https://catherineliyuankun.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>英文标点符号+运算符号</title>
    <link href="https://catherineliyuankun.github.io/%E8%8B%B1%E6%96%87%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7.html"/>
    <id>https://catherineliyuankun.github.io/英文标点符号-运算符号.html</id>
    <published>2019-10-30T08:45:20.000Z</published>
    <updated>2019-10-31T16:12:38.334Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>符号</th><th>英文含义</th><th>读音</th><th>中文含义</th></tr></thead><tbody><tr><td>．</td><td>period or full stop</td><td>英  [ˌsemiˈkəʊlən; ˌsemiˈkəʊlɒn]  美  [ˈsemikoʊlən]</td><td>句号</td></tr><tr><td>，</td><td>comma</td><td></td><td>逗号</td></tr><tr><td>：</td><td>colon</td><td></td><td>冒号</td></tr><tr><td>；</td><td>semicolon</td><td></td><td>分号</td></tr><tr><td>！</td><td>exclamation mark</td><td></td><td>惊叹号</td></tr><tr><td>？</td><td>question mark</td><td></td><td>问号</td></tr><tr><td>-</td><td>hyphen</td><td></td><td>连字符</td></tr><tr><td>*</td><td>asterisk</td><td></td><td>星号</td></tr><tr><td>’</td><td>apostrophe</td><td></td><td>所有格符号，单词内部的省略</td></tr><tr><td>—</td><td>dash</td><td></td><td>破折号</td></tr><tr><td>_</td><td>underscore</td><td></td><td></td></tr><tr><td>‘’</td><td>single quotation marks</td><td>英  [kwəʊˈteɪʃn]  美  [kwoʊˈteɪʃn]</td><td>单引号</td></tr><tr><td>“ ”</td><td>double quotation marks</td><td></td><td>双引号</td></tr><tr><td>( )</td><td>parenthesis or round brackets</td><td></td><td>圆括号</td></tr><tr><td>[ ]</td><td>square brackets</td><td>美  ['brækɪts]</td><td>方括号</td></tr><tr><td>&lt;&gt;</td><td>Angle brackets</td><td></td><td>尖括号</td></tr><tr><td>{}</td><td>curly brackets or braces</td><td></td><td>大括号</td></tr><tr><td>《》</td><td>French quotes</td><td></td><td>法文引号；书名号</td></tr><tr><td>…</td><td>ellipsis</td><td></td><td>省略号</td></tr><tr><td>¨</td><td>tandem colon</td><td></td><td>双点号</td></tr><tr><td>&quot;</td><td>ditto</td><td></td><td>同上</td></tr><tr><td>‖</td><td>parallel</td><td></td><td>双线号</td></tr><tr><td>／</td><td>slash or virgule or diagonal mark</td><td></td><td>斜线号</td></tr><tr><td>＆</td><td>ampersand = and</td><td></td><td></td></tr><tr><td>～</td><td>tilde or swung dash</td><td></td><td>代字号</td></tr><tr><td>§</td><td>section; division</td><td></td><td>分节号</td></tr><tr><td>→</td><td>arrow</td><td></td><td>箭号；参见号</td></tr><tr><td></td><td>vertical bar</td><td></td><td>竖线</td></tr><tr><td>\</td><td>backslash</td><td></td><td>反斜线</td></tr></tbody></table><p>=====================</p><p>附：部分数学符号的英文名称</p><table><thead><tr><th>符号</th><th>英文含义</th><th>中文含义</th></tr></thead><tbody><tr><td>＋</td><td>plus</td><td>加号；正号</td></tr><tr><td>－</td><td>minus</td><td>减号；负号</td></tr><tr><td>±</td><td>plus or minus</td><td>正负号</td></tr><tr><td>×</td><td>is multiplied by</td><td>乘号</td></tr><tr><td>÷</td><td>is divided by</td><td>除号</td></tr><tr><td>＝</td><td>is equal to</td><td>等于号</td></tr><tr><td>≠</td><td>is not equal to</td><td>不等于号</td></tr><tr><td>≡</td><td>is equivalent to</td><td>全等于号</td></tr><tr><td>≌</td><td>is equal to or approximately equal to</td><td>等于或约等于号</td></tr><tr><td>≈</td><td>is approximately equal to</td><td>约等于号</td></tr><tr><td>＜</td><td>less than sign</td><td>小于号</td></tr><tr><td>＞</td><td>more than or greater than sign</td><td>大于号</td></tr><tr><td>≮</td><td>is not less than</td><td>不小于号</td></tr><tr><td>≯</td><td>is not more than</td><td>不大于号</td></tr><tr><td>≤</td><td>is less than or equal to</td><td>小于或等于号</td></tr><tr><td>≥</td><td>is more than or equal to</td><td>大于或等于号</td></tr><tr><td>％</td><td>per cent</td><td>百分之…</td></tr><tr><td>‰</td><td>per mill</td><td>千分之…</td></tr><tr><td>∞</td><td>infinity</td><td>无限大号</td></tr><tr><td>∝</td><td>varies as</td><td>与…成比例</td></tr><tr><td>√</td><td>(square) root</td><td>平方根</td></tr><tr><td>∵</td><td>since; because</td><td>因为</td></tr><tr><td>∴</td><td>hence</td><td>所以</td></tr><tr><td>∷</td><td>equals, as (proportion)</td><td>等于，成比例</td></tr><tr><td>∠</td><td>angle</td><td>角</td></tr><tr><td>⌒</td><td>semicircle</td><td>半圆</td></tr><tr><td>⊙</td><td>circle</td><td>圆</td></tr><tr><td>○</td><td>circumference</td><td>圆周</td></tr><tr><td>△</td><td>triangle</td><td>三角形</td></tr><tr><td>⊥</td><td>perpendicular to</td><td>垂直于</td></tr><tr><td>∪</td><td>union of</td><td>并，合集</td></tr><tr><td>∩</td><td>intersection of</td><td>交，通集</td></tr><tr><td>∫</td><td>the integral of</td><td>…的积分</td></tr><tr><td>∑</td><td>(sigma) summation of</td><td>总和</td></tr><tr><td>°</td><td>degree</td><td>度</td></tr><tr><td>′</td><td>minute</td><td>分</td></tr><tr><td>″</td><td>second</td><td>秒</td></tr><tr><td>＃</td><td>number</td><td>…号</td></tr><tr><td>℃</td><td>Celsius system</td><td>摄氏度</td></tr><tr><td>＠</td><td>at</td><td>在</td></tr></tbody></table><h1 id="参考文章">参考文章</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2007/07/english_punctuation.html" target="_blank" rel="noopener">标点符号的英语名称</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;英文含义&lt;/th&gt;
&lt;th&gt;读音&lt;/th&gt;
&lt;th&gt;中文含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;．&lt;/td&gt;
&lt;td&gt;period or full stop&lt;/td&gt;
      
    
    </summary>
    
      <category term="English Learning" scheme="https://catherineliyuankun.github.io/categories/English-Learning/"/>
    
      <category term="日常英语" scheme="https://catherineliyuankun.github.io/categories/English-Learning/%E6%97%A5%E5%B8%B8%E8%8B%B1%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>Promise Vs setTimeout</title>
    <link href="https://catherineliyuankun.github.io/Promise-Vs-setTimeout.html"/>
    <id>https://catherineliyuankun.github.io/Promise-Vs-setTimeout.html</id>
    <published>2019-10-29T13:17:43.000Z</published>
    <updated>2019-11-05T09:13:00.584Z</updated>
    
    <content type="html"><![CDATA[<p>了解这个，就得了解JavaScript异步编程，了解任务队列才能知其根本。</p><p>一个事件循环（event loop）+多个任务队列（task queue）</p><h2 id="事件循环-event-loop">事件循环（event loop）</h2><h2 id="task-queue">Task Queue</h2><h3 id="macrotask-queue-宏任务队列">Macrotask Queue 宏任务队列:</h3><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate</li><li>requestAnimationFrame</li><li>UI rendeing</li><li>NodeJS中的`I/O （fs.readFile）等</li></ul><h3 id="microtask-queue-微任务队列">Microtask Queue 微任务队列:</h3><p>主要包括两类：</p><ul><li>独立回调microTask：如Promise，其成功／失败回调函数相互独立；</li><li>复合回调microTask：如 Object.observe, MutationObserver 和NodeJs中的 process.nextTick ，不同状态回调在同一函数体；</li></ul><h3 id="macrotask-microtask-两者关系">MacroTask MicroTask 两者关系</h3><p>入栈过程：</p><blockquote><ol><li>开始执行JavaScript脚本，将任务JavaScript Run入栈macroTask队列；</li><li>同步resolvePromise后；</li><li>入栈<code>第一个</code>setTimeout任务进入macroTask队列</li><li>入栈Proimse.then任务进入microTask队列；</li><li>入栈第二个setTimeout任务进入macroTask队列；<br>出栈执行过程：</li><li>同步执行代码，退出第一个macroTask，即JavaScript Run;</li><li>按顺序执行microTask queue 所有microTask；</li><li>执行下一个macroTask；</li></ol></blockquote><p>可以参考这个流程图：<br><img src="http://www.programmersought.com/images/250/ae6f91d1cb68f1e5d05b95a66a2cba72.png" alt="流程图"></p><h2 id="show-me-the-code">Show me the code</h2><p>例题1-5 来自<a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">ES6 Book </a>：</p><h3 id="例题1">例题1</h3><p>Promise 新建后就会立即执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'resolved.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="comment">// Hi!</span></span><br><span class="line"><span class="comment">// resolved</span></span><br></pre></td></tr></table></figure><p>上面代码中，Promise 新建后立即执行，所以首先输出的是Promise。然后，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。</p><h3 id="例题2">例题2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(r);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上面代码中，调用resolve(1)以后，后面的console.log(2)还是会执行，并且会首先打印出来。这是因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。</p><p>一般来说，调用resolve或reject以后，Promise 的使命就完成了，后继操作应该放到then方法里面，而不应该直接写在resolve或reject的后面。所以，最好在它们前面加上return语句，这样就不会有意外。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> resolve(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 后面的语句不会执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="例题3">例题3</h3><p>需要注意的是，立即resolve()的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'three'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'two'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure><p>上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(‘one’)则是立即执行，因此最先输出。</p><h3 id="例题4-promise-try">例题4 Promise.try</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(f);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</span><br><span class="line"><span class="comment">// next</span></span><br><span class="line"><span class="comment">// now</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数f是同步的，但是用 Promise 包装了以后，就变成异步执行了。</p><p>那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？回答是可以的，并且还有两种写法。第一种写法是用async函数来写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; f())();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>上面代码中，第二行是一个立即执行的匿名函数，会立即执行里面的async函数，因此如果f是同步的，就会得到同步的结果；如果f是异步的，就可以用then指定下一步，就像下面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; f())()</span><br><span class="line">.then(...)</span><br></pre></td></tr></table></figure><p>需要注意的是，async () =&gt; f()会吃掉f()抛出的错误。所以，如果想捕获错误，要使用promise.catch方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; f())()</span><br><span class="line">.then(...)</span><br><span class="line">.catch(...)</span><br></pre></td></tr></table></figure><p>第二种写法是使用new Promise()。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</span><br><span class="line">(</span><br><span class="line">  () =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">    resolve =&gt; resolve(f())</span><br><span class="line">  )</span><br><span class="line">)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>上面代码也是使用立即执行的匿名函数，执行new Promise()。这种情况下，同步函数也是同步执行的。</p><p>鉴于这是一个很常见的需求，所以现在有一个提案，提供Promise.try方法替代上面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</span><br><span class="line"><span class="built_in">Promise</span>.try(f);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>例题5, 6 来自<a href="https://juejin.im/post/5b7057b251882561381e69bf" target="_blank" rel="noopener">浅析setTimeout与Promise</a>：</p><h3 id="例题5">例题5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Before resolve"</span>);</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"will be executed at the top of the next Event Loop"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"p1 fulfilled"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"will be executed at the bottom of the next Event Loop"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Before resolve</span><br><span class="line">p1 fulfilled</span><br><span class="line">will be executed at the top of the next Event Loop</span><br><span class="line">will be executed at the bottom of the next Event Loop</span><br></pre></td></tr></table></figure><blockquote><ol><li>开始执行JavaScript脚本，将任务JavaScript Run入栈macroTask队列；</li><li>同步resolvePromise后；</li><li>入栈第一个setTimeout任务进入macroTask队列</li><li>入栈Proimse.then任务进入microTask队列；</li><li>入栈第二个setTimeout任务进入macroTask队列；</li><li>同步执行代码完毕，退出第一个macroTask，即JavaScript Run;  输出 Before resolve</li><li>执行清空microTask；输出 p1 fulfilled</li><li>执行下一个macroTask；输出 will be executed at the top of the next Event Loop<br>will be executed at the bottom of the next Event Loop</li></ol></blockquote><h3 id="例题6">例题6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"will be executed at the top of the next Event Loop"</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; resolve(<span class="number">1</span>); &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"will be executed at the bottom of the next Event Loop"</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"promise then - "</span> + j)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// will be executed at the top of the next Event Loop</span></span><br><span class="line"><span class="comment">// promise then - 0</span></span><br><span class="line"><span class="comment">// promise then - 1</span></span><br><span class="line"><span class="comment">// promise then - 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// promise then - 99</span></span><br><span class="line"><span class="comment">// will be executed at the bottom of the next Event Loop</span></span><br></pre></td></tr></table></figure><h3 id="例题7">例题7</h3><p>来源： <a href="https://www.zhihu.com/question/36972010" target="_blank" rel="noopener">Promise的队列与setTimeout的队列有何关联？</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>)&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ )&#123;</span><br><span class="line">        i==<span class="number">9999</span> &amp;&amp; resolve()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1,2,3,5,4</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>首先同步执行完所有代码，其间注册了三个setTimeout异步任务，100个Promise异步任务；</li><li>然后检查MacroTask队列，取第一个到期的MacroTask，执行输出will be executed at the top of the next Event Loop;</li><li>然后检查MicroTask队列，发现没有到期的MicroTask，进入第4步；</li><li>再次检查MacroTask，执行第二个setTimeout处理函数，resolve Promise；</li><li>然后检查MicroTask队列，发现Promise已解决，其异步处理函数均可执行，依次执行，输出promise then - 0 至promise then - 99；</li><li>最后再次检查MacroTask队列，执行输出will be executed at the bottom of the next Event Loop</li><li>交替往复检查两个异步任务队列，直至执行完毕；</li></ol><h2 id="reference-links">Reference Links</h2><ul><li><a href="https://juejin.im/post/5b7057b251882561381e69bf" target="_blank" rel="noopener">浅析setTimeout与Promise</a></li><li><a href="https://juejin.im/post/5b7057b251882561381e69bf" target="_blank" rel="noopener">What is the relationship between event loop and Promise [stackoverflow]</a></li><li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">ES6 Book </a></li><li><a href="https://www.zhihu.com/question/36972010" target="_blank" rel="noopener">Promise的队列与setTimeout的队列有何关联？[知乎]</a></li><li><a href="https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout" target="_blank" rel="noopener">Writing a JavaScript framework - Execution timing, beyond setTimeout</a></li><li><a href="https://github.com/deenjohn/NodeRevision/blob/master/6-Concurrency%20model%20and%20event%20loop%20-part%20B.md" target="_blank" rel="noopener">6-Concurrency model and event loop -part B</a></li><li><a href="https://stackoverflow.com/questions/34753342/microtasks-vs-events-and-how-to-define-what-as-which" target="_blank" rel="noopener">Microtasks vs Events and how to define what as which?</a></li><li><a href="https://medium.com/@jitubutwal144/javascript-how-is-callback-execution-strategy-for-promises-different-than-dom-events-callback-73c0e9e203b1" target="_blank" rel="noopener">JavaScript: How is callback execution strategy for promises different than DOM events callback?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解这个，就得了解JavaScript异步编程，了解任务队列才能知其根本。&lt;/p&gt;
&lt;p&gt;一个事件循环（event loop）+多个任务队列（task queue）&lt;/p&gt;
&lt;h2 id=&quot;事件循环-event-loop&quot;&gt;事件循环（event loop）&lt;/h2&gt;
&lt;h2
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="JS" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/JS/"/>
    
    
      <category term="Promise" scheme="https://catherineliyuankun.github.io/tags/Promise/"/>
    
      <category term="TODO" scheme="https://catherineliyuankun.github.io/tags/TODO/"/>
    
  </entry>
  
  <entry>
    <title>Browser Caching</title>
    <link href="https://catherineliyuankun.github.io/Browser-Caching.html"/>
    <id>https://catherineliyuankun.github.io/Browser-Caching.html</id>
    <published>2019-10-28T15:29:53.000Z</published>
    <updated>2019-10-30T08:57:06.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reference-links">Reference Links:</h1><ul><li><a href="https://github.com/amandakelake/blog/issues/43" target="_blank" rel="noopener">缓存（一）——缓存总览：从性能优化的角度看缓存 #43</a></li><li><a href="http://jixianqianduan.com/frontend-javascript/2015/12/28/nine-browser-cache-methods.html" target="_blank" rel="noopener">九种浏览器端缓存机制知多少</a></li><li><a href="https://segmentfault.com/a/1190000004132566#articleHeader6" target="_blank" rel="noopener">H5 缓存机制浅析 - 移动端 Web 加载性能优化</a></li></ul><h2 id="indexeddb">IndexedDB</h2><ul><li><a href="https://lavas-project.github.io/pwa-book/chapter03/5-indexeddb.html" target="_blank" rel="noopener">《PWA 应用实战》- IndexedDB</a></li><li><a href="https://lavas.baidu.com/pwa/offline-and-cache-loading/web-storage/indexeddb-best-practices-app-state" target="_blank" rel="noopener">利用 indexedDB 保持应用状态的最佳实践</a></li><li><a href="https://developers.google.com/web/ilt/pwa/working-with-indexeddb" target="_blank" rel="noopener">Progressive Web Apps Training - Working with IndexedDB</a></li><li><a href="https://www.w3.org/TR/IndexedDB/" target="_blank" rel="noopener">Indexed Database API 2.0 from W3C</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB" target="_blank" rel="noopener">Using IndexedDB MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;reference-links&quot;&gt;Reference Links:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amandakelake/blog/issues/43&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="Browser Caching" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/Browser-Caching/"/>
    
    
      <category term="cache" scheme="https://catherineliyuankun.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>IndexedDB-delete whole database by javaScript</title>
    <link href="https://catherineliyuankun.github.io/IndexedDB-delete-whole-database-by-javaScript.html"/>
    <id>https://catherineliyuankun.github.io/IndexedDB-delete-whole-database-by-javaScript.html</id>
    <published>2019-10-28T13:24:15.000Z</published>
    <updated>2019-11-17T19:07:09.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用indexeddb-deletedatabase：">使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase" target="_blank" rel="noopener">indexedDB.deleteDatabase</a>：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DBDeleteRequest = <span class="built_in">window</span>.indexedDB.deleteDatabase(<span class="string">"toDoList"</span>);</span><br><span class="line"></span><br><span class="line">DBDeleteRequest.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Error deleting database."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">DBDeleteRequest.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Database deleted successfully"</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">console</span>.log(event.result); <span class="comment">// should be undefined</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// you must call db.close() before delete, if you already open. otherwise you will get onblocked event</span></span><br><span class="line">DBDeleteRequest.onblocked = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Couldn't delete database due to the operation being blocked"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="indexeddb-databases">indexedDB.<a href="developer.mozilla.org/en-US/docs/Web/API/IDBFactory/databases">databases()</a></h1><p>可以使用indexedDB.databases() 得到所有的databases List.<br>如果这个数据库已经open过，在删除数据库前需要调用<a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/close" target="_blank" rel="noopener">db.close() </a> 否则onblocked event会触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.indexedDB.databases()</span><br><span class="line">    .then(<span class="function">(<span class="params">dbs</span>) =&gt;</span> &#123;</span><br><span class="line">        dbs.map(<span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">            db.close();</span><br><span class="line">            <span class="built_in">window</span>.indexedDB.deleteDatabase(db.name)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><p>indexedDB.databases() 有一个很大问题就是支持的浏览器太少了。只有Chrome和Opera能很好的支持，IE11, Firefox, Safari都不太支持。</p><p>实例：删除除了此user的所有其他IndexedDB</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks IndexedDB for all IndexedDBs and deletes them if the username</span></span><br><span class="line"><span class="comment"> * is not the one provided. Used when changing users after session expires.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @static</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; usernameToKeep Current authenticated user</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> * @memberof DB</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> purgeIndexedDB(usernameToKeep) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.indexedDB &amp;&amp; <span class="built_in">window</span>.indexedDB.databases) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.indexedDB.databases()</span><br><span class="line">      .then(<span class="function">(<span class="params">dbs</span>) =&gt;</span> </span><br><span class="line">          dbs.filter(<span class="function">(<span class="params">db</span>) =&gt;</span> (db.name.includes(<span class="string">'_pouch_'</span>) &amp;&amp; (!usernameToKeep || !db.name.includes(usernameToKeep)))))</span><br><span class="line">      .then(<span class="function">(<span class="params">IndexedDBS</span>) =&gt;</span> </span><br><span class="line">          <span class="built_in">Promise</span>.all(IndexedDBS.map(<span class="function">(<span class="params">IndexedDB</span>) =&gt;</span> <span class="built_in">window</span>.indexedDB.deleteDatabase(IndexedDB.name))))</span><br><span class="line">      .catch(<span class="built_in">console</span>.error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reference-links">Reference Links:</h1><ul><li><a href="https://stackoverflow.com/questions/15861630/how-can-i-remove-a-whole-indexeddb-database-from-javascript#" target="_blank" rel="noopener">How can I remove a whole IndexedDB database from JavaScript?</a></li><li><a href="developer.mozilla.org/en-US/docs/Web/API/IDBFactory/databases">indexedDB.databases()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase" target="_blank" rel="noopener">indexedDB.deleteDatabase</a></li><li><a href="https://www.w3.org/TR/IndexedDB/#dom-idbfactory-deletedatabase" target="_blank" rel="noopener">dom-idbfactory-deletedatabase W3C</a></li><li><a href="https://www.w3.org/TR/IndexedDB/#delete-a-database" target="_blank" rel="noopener">5.3. Deleting a database W3C</a></li></ul><h2 id="pouch">Pouch</h2><ul><li><a href="https://github.com/pouchdb/pouchdb" target="_blank" rel="noopener">pouchdb/pouchdb</a></li><li><a href="http://webfuse.cn/2016/09/24/PouchDB%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">PouchDB简单入门</a></li><li><a href="http://www.vue5.com/pouchdb/pouchdb_delete_database.html" target="_blank" rel="noopener">学习PouchDB</a></li><li><a href="https://www.w3.org/TR/IndexedDB/#dom-idbfactory-deletedatabase" target="_blank" rel="noopener">dom-idbfactory-deletedatabase W3C</a></li><li><a href="https://www.w3.org/TR/IndexedDB/#delete-a-database" target="_blank" rel="noopener">5.3. Deleting a database W3C</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用indexeddb-deletedatabase：&quot;&gt;使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="Browser Caching" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/Browser-Caching/"/>
    
      <category term="IndexedDB" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/Browser-Caching/IndexedDB/"/>
    
    
      <category term="IndexedDB" scheme="https://catherineliyuankun.github.io/tags/IndexedDB/"/>
    
  </entry>
  
  <entry>
    <title>Z-index</title>
    <link href="https://catherineliyuankun.github.io/Z-index.html"/>
    <id>https://catherineliyuankun.github.io/Z-index.html</id>
    <published>2019-10-24T11:48:32.000Z</published>
    <updated>2019-10-29T12:24:43.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="reference-links">Reference Links</h2><ul><li><a href="https://webdesign.tutsplus.com/zh-hans/articles/what-you-may-not-know-about-the-z-index-property--webdesign-16892" target="_blank" rel="noopener">关于z-index 那些你不知道的事</a></li></ul><!-- - [官方文档中文版：hooks](https://zh-hans.reactjs.org/docs/hooks-intro.html) -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;reference-links&quot;&gt;Reference Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webdesign.tutsplus.com/zh-hans/articles/what-you-may-not-know-about-
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="CSS" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/CSS/"/>
    
    
      <category term="TODO" scheme="https://catherineliyuankun.github.io/tags/TODO/"/>
    
  </entry>
  
  <entry>
    <title>HTTP CORS disable for chrome</title>
    <link href="https://catherineliyuankun.github.io/HTTP-CORS-disable.html"/>
    <id>https://catherineliyuankun.github.io/HTTP-CORS-disable.html</id>
    <published>2019-10-21T13:51:01.000Z</published>
    <updated>2019-11-04T17:04:37.707Z</updated>
    
    <content type="html"><![CDATA[<p>CORS的基本原理请看上一篇：</p><!-- [CORS的基本原理](../../../../2019/10/21/HTTP CORS disable) --><p><a href="../HTTP-CORS.html">CORS的基本原理</a></p><p>简单关闭Chrome的CORS方法:</p><h1 id="macos">MacOS</h1><p>命令行里, 会另外打开一个Chrome窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜   ✗ open -n -a <span class="string">"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"</span> --args --user-data-dir=<span class="string">"/tmp/chrome_dev_test"</span> --<span class="built_in">disable</span>-web-security</span><br></pre></td></tr></table></figure><blockquote><p>–user-data-dir 参数需要 Chrome 版本 49+ on OSX</p></blockquote><p>如果想访问本地文件（开发目的来使用 AJAX 或 JSON），可以使用flag：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-–allow-<span class="built_in">file</span>-access-<span class="built_in">from</span>-<span class="built_in">files</span></span><br></pre></td></tr></table></figure><h1 id="windows">Windows</h1><p>进入command prompt，进入到Chrome.exe文件夹，执行命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome<span class="selector-class">.exe</span> --disable-web-security</span><br></pre></td></tr></table></figure><p>这个命令会禁掉CORS，而且可以访问本地文件。</p><h1 id="reference-links">Reference Links:</h1><p><a href="https://stackoverflow.com/questions/3102819/disable-same-origin-policy-in-chrome" target="_blank" rel="noopener">Disable same origin policy in Chrome</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CORS的基本原理请看上一篇：&lt;/p&gt;
&lt;!-- [CORS的基本原理](../../../../2019/10/21/HTTP CORS disable) --&gt;
&lt;p&gt;&lt;a href=&quot;../HTTP-CORS.html&quot;&gt;CORS的基本原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Network" scheme="https://catherineliyuankun.github.io/categories/TECH/Network/"/>
    
      <category term="Servlet/HTTP" scheme="https://catherineliyuankun.github.io/categories/TECH/Network/Servlet-HTTP/"/>
    
    
      <category term="CORS" scheme="https://catherineliyuankun.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>React 16 - Hooks</title>
    <link href="https://catherineliyuankun.github.io/React-16-Hooks.html"/>
    <id>https://catherineliyuankun.github.io/React-16-Hooks.html</id>
    <published>2019-10-21T09:45:22.000Z</published>
    <updated>2019-10-29T12:28:26.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hooks-faq">Hooks FAQ</h1><p>觉得<a href="https://zh-hans.reactjs.org/docs/hooks-faq.html" target="_blank" rel="noopener">Hooks FAQ</a>里面回答了很多很实际的疑问。</p><h2 id="生命周期方法要如何对应到-hook？">生命周期方法要如何对应到 Hook？</h2><ul><li><p>constructor：函数组件不需要构造函数。你可以通过调用 useState 来初始化 state。如果计算的代价比较昂贵，你可以传一个函数给 useState。</p></li><li><p>getDerivedStateFromProps：改为 在渲染时 安排一次更新。</p></li><li><p>shouldComponentUpdate：详见 下方 React.memo.</p></li><li><p>render：这是函数组件体本身。</p></li><li><p>componentDidMount, componentDidUpdate, componentWillUnmount：useEffect Hook 可以表达所有这些(包括 不那么 常见 的场景)的组合。</p></li><li><p>componentDidCatch and getDerivedStateFromError：目前还没有这些方法的 Hook 等价写法，但很快会加上。</p></li></ul><h2 id="我该如何使用-hook-进行数据获取？">我该如何使用 Hook 进行数据获取？</h2><p>该 <a href="https://codesandbox.io/s/jvvkoo8pq3" target="_blank" rel="noopener">demo</a> 会帮助你开始理解。欲了解更多，请查阅 <a href="https://www.robinwieruch.de/react-hooks-fetch-data" target="_blank" rel="noopener">react-hooks-fetch-data</a> 来了解如何使用 Hook 进行数据获取。</p><h2 id="reference-links">Reference Links</h2><ul><li><a href="https://react.docschina.org/docs/portals.html" target="_blank" rel="noopener">新一代 React API — React Hooks React Conf 2018 React Today and Tomorrow 重點回顧</a></li><li><a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">官方文档英文版：hooks-intro</a></li><li><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">官方文档中文版：hooks</a></li><li><a href="https://upmostly.com/tutorials/settimeout-in-react-components-using-hooks" target="_blank" rel="noopener">setTimeout in React Components Using Hooks</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hooks-faq&quot;&gt;Hooks FAQ&lt;/h1&gt;
&lt;p&gt;觉得&lt;a href=&quot;https://zh-hans.reactjs.org/docs/hooks-faq.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hooks FAQ&lt;/a
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="React 16" scheme="https://catherineliyuankun.github.io/tags/React-16/"/>
    
  </entry>
  
  <entry>
    <title>Github All You should know</title>
    <link href="https://catherineliyuankun.github.io/Github-All-You-should-know.html"/>
    <id>https://catherineliyuankun.github.io/Github-All-You-should-know.html</id>
    <published>2019-10-15T13:33:20.000Z</published>
    <updated>2019-10-15T14:55:53.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="who-is-assignees">Who is Assignees?</h2><p><a href="https://stackoverflow.com/questions/43617352/" target="_blank" rel="noopener"> What do reviewer and assignee mean in pull request?</a> 里的答案：</p><blockquote><p>For a pull request, you can now &quot;request a review explicitly from collaborators, making it easier to specify who you’d like to review your pull request.&quot;<br>但是Assignees<br>Assignees, on the other hand, “clarify who is working on specific issues and pull requests.”</p></blockquote><blockquote><p>In sum, the difference is whether you’d like to ask someone to work on fixing an issue or contribute to a pull request (<strong>assignee</strong>), versus asking someone to quality check your work (<strong>reviewer</strong>).<br>Sources:<br><a href="https://github.com/blog/2291-introducing-review-requests" target="_blank" rel="noopener">https://github.com/blog/2291-introducing-review-requests</a><br><a href="https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/" target="_blank" rel="noopener">https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/</a></p></blockquote><p><a href="https://stackoverflow.com/questions/41087206/on-github-whats-the-difference-between-reviewer-and-assignee" target="_blank" rel="noopener"> On GitHub, what’s the difference between reviewer and assignee?</a>里的答案：</p><blockquote><p>After discussing with several OSS maintainers, reviewers is defined as what the word supposed to be: to review (someone’s code) and “assignee” has a looser definiton explained below.</p></blockquote><blockquote><p>For “reviewer”: someone you want to review the code. Not necessarily the person responsible for that area or responsible for merging the commit. Can be someone who worked on that chunk of code before, as GitHub auto-suggests.</p></blockquote><blockquote><p>For “assignee”: up to the project’s team/maintainer what it means and there’s no strict definition. It can be the PR opener, or someone responsible for that area (who is going to accept the PR after the review is done or just close it). It’s not up to GitHub to define what it is leaving it open for project maintainers what fits best for their project.</p></blockquote><blockquote><p>Previous answer:<br>Ok I’ll go ahead and answer my own question.<br>For PR of users with write-access: the Assignee would be the same person who opened the PR, and reviewer would replace the old assignee function (reviewing code), being this one someone of assignee choice.<br>For PR of users without write-access (outside contributors): Someone with write-access would assign herself (or other write-priviledge member), to review the PR (Reviewer). Assignee is blank.<br>For unfinished PR from outside contributors: the write-access member would take the unfinished work and assign for her. She will be responsible for finishing the task, being the Assignee. Since the main reason of PRs is reviewing changes, she would select some other people to review the changes.</p></blockquote><p>总结下：<br>reviewer: 一般很好理解，就是来review你代码的人。可以是原来改过这段代码的人，负责这块代码的人或是负责merge代码的人。<br>Assignees: 其实，没有严格定义，可以具体看项目组怎么用这个选项。一般分两个场景</p><ol><li>Pull request：创建pull request的人（这种在另一个组的时候用过，如果你是创建的人，可以指定自己），或者是负责merge代码的人（我们组是这么用的），或者就是当review/colse PR完后accept PR的人.</li><li>Issue：当你收到一个issue（通常不是你建的issue）， 你需要指定人来fix这个issue，就可以在Assignees填。</li></ol><h1 id="reference-links">Reference Links:</h1><ul><li><a href="https://stackoverflow.com/questions/41087206/on-github-whats-the-difference-between-reviewer-and-assignee" target="_blank" rel="noopener"> On GitHub, what’s the difference between reviewer and assignee?</a></li><li><a href="https://stackoverflow.com/questions/43617352/what-do-reviewer-and-assignee-mean-in-pull-request?noredirect=1&amp;lq=1" target="_blank" rel="noopener"> What do reviewer and assignee mean in pull request? [duplicate]</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/08/issue.html" target="_blank" rel="noopener"> 如何使用 Issue 管理软件项目？</a></li><li><a href="https://tech.hahow.in/%E5%AE%8C%E5%96%84-github-flow-%E6%9C%80%E5%BE%8C%E4%B8%80%E5%93%A9%E8%B7%AF-probot-d1cda24e4455" target="_blank" rel="noopener"> 完善 GitHub Flow 最後一哩路 — Probot -Assignees 下拉選單</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;who-is-assignees&quot;&gt;Who is Assignees?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/43617352/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; 
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Tools" scheme="https://catherineliyuankun.github.io/categories/TECH/Tools/"/>
    
    
      <category term="git" scheme="https://catherineliyuankun.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Responsive web - Flexbox</title>
    <link href="https://catherineliyuankun.github.io/Responsive-web-Flexbox.html"/>
    <id>https://catherineliyuankun.github.io/Responsive-web-Flexbox.html</id>
    <published>2019-10-15T11:18:56.000Z</published>
    <updated>2019-10-15T14:55:36.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础教程：">基础教程：</h2><ul><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener"> 官方文档 A Complete Guide to Flexbox</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener"> 阮一峰 Flex 布局教程：语法篇</a></li></ul><p>但是看完还是有些不懂的地方：</p><h2 id="flex-basis-具体的含义">Flex Basis 具体的含义:</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis" target="_blank" rel="noopener"> flex-basis MDN</a><br>以及和width的区别：</li><li><a href="https://www.jianshu.com/p/17b1b445ecd4" target="_blank" rel="noopener"> Flex Basis与Width的区别</a></li><li><a href="https://gedd.ski/post/the-difference-between-width-and-flex-basis/" target="_blank" rel="noopener"> The Difference Between Width and Flex Basis</a></li></ul><h2 id="flex-grow-flex-shrink-flex-basis-是怎么此消彼长的">flex-grow、flex-shrink、flex-basis 是怎么此消彼长的</h2><p>如果分配剩余空间？</p><ul><li><a href="https://zhoon.github.io/css3/2014/08/23/flex.html" target="_blank" rel="noopener"> 深入理解css3中的flex-grow、flex-shrink、flex-basis</a></li></ul><h2 id="小实践：">小实践：</h2><p>Code Pen - Flexbox Form:<br><a href="https://codepen.io/catherineliyuankun/pen/dyyMKzW" target="_blank" rel="noopener">Flexbox Form</a><br>有个困惑， 比如.wrapper 的width只有比如100px; 但是lable/span又不想换行，这时lable的flex-grow:1,.date的flex-grow:3. 也就是比例是1：3，lable就会被截断。 当然如果flex-grow:1都为1，input和lable同比例缩小，会解决。<br>但是在lable不长的情况下，不想让lable 和 input 部分的比例为1：1.</p><p>当然通过 media query 来实现修改flex的值，但是如果我想以.wrapper的宽度来修改flex-grow的值要怎么做呢？或者以lable的长度来修改.date的flex-grow的值？（lable长的时候，lable: .date = 1：1，lable短的时候，1：3）?</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">768px</span>) &#123;</span><br><span class="line">   <span class="selector-class">.form-row</span> &gt; <span class="selector-class">.date</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">3</span>;  </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> @<span class="keyword">media</span> screen and (min-width: <span class="number">992px</span>) &#123;</span><br><span class="line">   <span class="selector-class">.form-row</span> &gt; <span class="selector-class">.date</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">4</span>;  </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.form-row</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span> .<span class="number">5em</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form-row</span> &gt; <span class="selector-class">.date</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: baseline;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reference-links">Reference Links:</h1><ul><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener"> 官方文档 A Complete Guide to Flexbox</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener"> 阮一峰 Flex 布局教程：语法篇</a></li><li><a href="https://www.quackit.com/css/flexbox/tutorial/align_form_elements_with_flexbox.cfm" target="_blank" rel="noopener"> How to Align Form Elements with Flexbox</a></li><li><a href="https://www.jianshu.com/p/17b1b445ecd4" target="_blank" rel="noopener"> Flex Basis与Width的区别</a></li><li><a href="https://gedd.ski/post/the-difference-between-width-and-flex-basis/" target="_blank" rel="noopener"> The Difference Between Width and Flex Basis</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础教程：&quot;&gt;基础教程：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; 官方文档 A 
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="CSS" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/CSS/"/>
    
      <category term="Flexbox" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/CSS/Flexbox/"/>
    
    
      <category term="Flexbox" scheme="https://catherineliyuankun.github.io/tags/Flexbox/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Promise</title>
    <link href="https://catherineliyuankun.github.io/ES6-Promise.html"/>
    <id>https://catherineliyuankun.github.io/ES6-Promise.html</id>
    <published>2019-10-13T12:05:41.000Z</published>
    <updated>2019-10-29T12:45:12.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="promise">Promise</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p><h2 id="promise-prototype-then">Promise.prototype.then()</h2><p>then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数</p><h2 id="promise-prototype-catch">Promise.prototype.catch()</h2><p>.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。</p><h2 id="promise-prototype-finally">Promise.prototype.finally()</h2><p>finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">//cb</span></span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">    <span class="comment">//.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(</span><br><span class="line">      <span class="comment">//不管 Promise 对象最后状态如何，都会执行的操作</span></span><br><span class="line">      <span class="comment">//与状态无关的，不依赖于 Promise 的执行结果</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout start'</span>);</span><br><span class="line">    setTimeout(resolve, ms, <span class="string">'done'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout end'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeout(<span class="number">100</span>).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout start</span></span><br><span class="line"><span class="comment">// setTimeout end</span></span><br><span class="line"><span class="comment">// done</span></span><br></pre></td></tr></table></figure><h1 id="处理多个promise">处理多个promise</h1><h2 id="promise-all">Promise.all()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>return all resolved</p><p>p的状态由p1、p2、p3决定，分成两种情况。<br>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p><p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p><h2 id="promise-race">Promise.race()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>return first result</p><p>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p><h2 id="promise-allsettled">Promise.allSettled()</h2><p>return all end</p><p>只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束。该方法由 ES2020 引入。<br>我们不关心异步操作的结果，只关心这些操作有没有结束。这时，Promise.allSettled()方法就很有用。如果没有这个方法，想要确保所有操作都结束，就很麻烦。Promise.all()方法无法做到这一点。</p><h2 id="promise-any">Promise.any()</h2><p>return any resolved</p><p>只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态。该方法目前是一个第三阶段的提案 。</p><h1 id="返回一个新的-promise-实例">返回一个新的 Promise 实例</h1><h2 id="promise-resolve">Promise.resolve()</h2><p>需要将现有对象转为 Promise 对象。Promise.resolve()在本轮“事件循环”结束时执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure><h2 id="promise-reject">Promise.reject()</h2><p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。<br>注意，Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。这一点与Promise.resolve方法不一致。</p><h2 id="promise-try">Promise.try()</h2><p>实际开发中，经常遇到一种情况：不知道或者不想区分，函数f是同步函数还是异步操作，但是想用 Promise 来处理它。因为这样就可以不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误。一般就会采用下面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(f)</span><br></pre></td></tr></table></figure><p>上面的写法有一个缺点，就是如果f是同步函数，那么它会在本轮事件循环的末尾执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(f);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</span><br><span class="line"><span class="comment">// next</span></span><br><span class="line"><span class="comment">// now</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数f是同步的，但是用 Promise 包装了以后，就变成异步执行了。</p><p>那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？回答是可以的，并且还有两种写法。</p><h3 id="第一种写法是用async函数来写">第一种写法是用async函数来写。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; f())();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>上面代码中，第二行是一个立即执行的匿名函数，会立即执行里面的async函数，因此如果f是同步的，就会得到同步的结果；如果f是异步的，就可以用then指定下一步，就像下面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; f())()</span><br><span class="line">.then(...)</span><br></pre></td></tr></table></figure><p>需要注意的是，async () =&gt; f()会吃掉f()抛出的错误。所以，如果想捕获错误，要使用promise.catch方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; f())()</span><br><span class="line">.then(...)</span><br><span class="line">.catch(...)</span><br></pre></td></tr></table></figure><h3 id="第二种写法是使用new-promise">第二种写法是使用new Promise()。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</span><br><span class="line">(</span><br><span class="line">  () =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">    resolve =&gt; resolve(f())</span><br><span class="line">  )</span><br><span class="line">)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>上面代码也是使用立即执行的匿名函数，执行new Promise()。这种情况下，同步函数也是同步执行的。</p><p>鉴于这是一个很常见的需求，所以现在有一个提案，提供Promise.try方法替代上面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</span><br><span class="line"><span class="built_in">Promise</span>.try(f);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>事实上，Promise.try存在已久，Promise 库Bluebird、Q和when，早就提供了这个方法。</p><p>由于Promise.try为所有操作提供了统一的处理机制，所以如果想用then方法管理流程，最好都用Promise.try包装一下。这样有许多好处，其中一点就是可以更好地管理异常。</p><p>function getUsername(userId) {<br>return database.users.get({id: userId})<br>.then(function(user) {<br>return <a href="http://user.name" target="_blank" rel="noopener">user.name</a>;<br>});<br>}<br>上面代码中，database.users.get()返回一个 Promise 对象，如果抛出异步错误，可以用catch方法捕获，就像下面这样写。</p><p>database.users.get({id: userId})<br>.then(…)<br>.catch(…)<br>但是database.users.get()可能还会抛出同步错误（比如数据库连接错误，具体要看实现方法），这时你就不得不用try…catch去捕获。</p><p>try {<br>database.users.get({id: userId})<br>.then(…)<br>.catch(…)<br>} catch (e) {<br>// …<br>}<br>上面这样的写法就很笨拙了，这时就可以统一用promise.catch()捕获所有同步和异步的错误。</p><p>Promise.try(() =&gt; database.users.get({id: userId}))<br>.then(…)<br>.catch(…)<br>事实上，Promise.try就是模拟try代码块，就像promise.catch模拟的是catch代码块。</p><h1 id="reference-links">Reference Links:</h1><ul><li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">ES6 Book </a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;promise&quot;&gt;Promise&lt;/h1&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="ES6" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/ES6/"/>
    
    
      <category term="Promise" scheme="https://catherineliyuankun.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>HTTP CORS</title>
    <link href="https://catherineliyuankun.github.io/HTTP-CORS.html"/>
    <id>https://catherineliyuankun.github.io/HTTP-CORS.html</id>
    <published>2019-10-12T13:51:01.000Z</published>
    <updated>2019-10-22T08:33:35.042Z</updated>
    
    <content type="html"><![CDATA[<p>Reference Links里的两篇文章讲述的已经很详细了。简单列一下：</p><h1 id="0-cors">0 CORS</h1><p>简单说就是从A网址（origin (domain) ）向B网址发送请求，称为跨域。从A网址向A网址发送请求就是，同域。</p><h2 id="a-与-b-什么不同？">A 与 B 什么不同？</h2><p>不同的域、协议或端口。</p><p><img src="https://mdn.mozillademos.org/files/14295/CORS_principle.png" alt="CORS"></p><h1 id="1-简单请求-simple-request">1. 简单请求（simple request）</h1><blockquote><p>（1) 请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul></blockquote><blockquote><p>（2）HTTP的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/ plain</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></blockquote><blockquote><p>（3）请求中的任意XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。<br>（4）请求中没有使用 ReadableStream 对象。</p></blockquote><p>假如站点 <a href="http://Server-b.com" target="_blank" rel="noopener">http://Server-b.com</a> 的网页应用想要访问 <a href="http://bar.other" target="_blank" rel="noopener">http://bar.other</a> 的资源。<br>A向B请求，那么A就是Orign.<br><img src="https://mdn.mozillademos.org/files/14293/simple_req.png" alt="简单请求（simple request）"></p><h1 id="2-非简单请求-not-so-simple-request">2. 非简单请求（not-so-simple request）</h1><blockquote><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。</p></blockquote><blockquote><p>（1) 使用了下面任一 HTTP 方法：</p><ul><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li><li>PATCH</li></ul></blockquote><blockquote><p>（2) 人为设置了对 CORS 安全的首部字段集合之外的其他首部字段。该集合为：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type (需要注意额外的限制)</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></blockquote><blockquote><p>（3) Content-Type 的值不属于下列之一:</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ul></blockquote><blockquote><p>（4) 请求中的XMLHttpRequestUpload 对象注册了任意多个事件监听器。</p></blockquote><blockquote><p>（5) 请求中使用了ReadableStream对象。</p></blockquote><p>假如站点 <a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> 的网页应用想要访问 <a href="http://bar.other" target="_blank" rel="noopener">http://bar.other</a> 的资源。</p><p><img src="https://mdn.mozillademos.org/files/16753/preflight_correct.png" alt="预检请求+真实请求"></p><h2 id="2-1-预检请求-option">2.1 预检请求 OPTION</h2><p>OPTION 由于跨域请求被拦截，返回503：<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/HTTP-CORS/OPTION%20503.png" alt="OPTION 503"></p><p>Error:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'https://B'</span> <span class="keyword">from</span> origin <span class="string">'https://A'</span> </span><br><span class="line">has been blocked by CORS policy: </span><br><span class="line">Response to preflight request doesn<span class="string">'t pass access control check: It does not have HTTP ok status.</span></span><br></pre></td></tr></table></figure><h2 id="2-2-真实请求">2.2 真实请求</h2><h1 id="3-附带身份凭证的请求">3 附带身份凭证的请求</h1><blockquote><p>它其实必然是1 简单请求（simple request）2. 非简单请求（not-so-simple request）的其中一种。只是多加了对Cookie和HTTP认证信息的判断。<br>CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>另一方面，开发者必须在AJAX请求中打开withCredentials属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p><p>但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>A向B请求。<code>需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页A一致的域名。</code>否则报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'https://B'</span> <span class="keyword">from</span> origin <span class="string">'https://A'</span> has been blocked by CORS policy: </span><br><span class="line">The value <span class="keyword">of</span> the <span class="string">'Access-Control-Allow-Origin'</span> header <span class="keyword">in</span> the response must not be </span><br><span class="line">the wildcard <span class="string">'*'</span> when the request<span class="string">'s credentials mode is '</span>include<span class="string">'.</span></span><br><span class="line"><span class="string">The credentials mode of requests initiated by the XMLHttpRequest </span></span><br><span class="line"><span class="string">is controlled by the withCredentials attribute.</span></span><br></pre></td></tr></table></figure><p>同时，Cookie依然遵循同源政策，只有用服务器域名B设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页A代码中的document.cookie也无法读取服务器域名下的Cookie。</p><p><img src="https://mdn.mozillademos.org/files/14291/cred-req.png" alt="附带身份凭证的请求"></p><h1 id="总结流程">总结流程</h1><p>来源：<a href="https://github.com/amandakelake/blog/issues/62" target="_blank" rel="noopener">CORS 简单请求+预检请求（彻底理解跨域）</a><br><img src="https://user-images.githubusercontent.com/25027560/50205881-c409b080-03a4-11e9-8a57-a2a6d0e1d879.png" alt="CORS请求流程"></p><h1 id="reference-links">Reference Links:</h1><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP访问控制（CORS）</a><br><a href="https://github.com/amandakelake/blog/issues/62" target="_blank" rel="noopener">CORS 简单请求+预检请求（彻底理解跨域）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Reference Links里的两篇文章讲述的已经很详细了。简单列一下：&lt;/p&gt;
&lt;h1 id=&quot;0-cors&quot;&gt;0 CORS&lt;/h1&gt;
&lt;p&gt;简单说就是从A网址（origin (domain) ）向B网址发送请求，称为跨域。从A网址向A网址发送请求就是，同域。&lt;/p&gt;

      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Network" scheme="https://catherineliyuankun.github.io/categories/TECH/Network/"/>
    
      <category term="Servlet/HTTP" scheme="https://catherineliyuankun.github.io/categories/TECH/Network/Servlet-HTTP/"/>
    
    
      <category term="CORS" scheme="https://catherineliyuankun.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>React all articles</title>
    <link href="https://catherineliyuankun.github.io/React-all-articles.html"/>
    <id>https://catherineliyuankun.github.io/React-all-articles.html</id>
    <published>2019-09-09T09:44:38.000Z</published>
    <updated>2019-11-04T17:06:57.538Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../React-16-New-feature-Summary-Links.html">React 16 new feature</a><br><a href="https://juejin.im/post/5c7df2e7f265da2d8a55d49d" target="_blank" rel="noopener">【React深入】React事件机制</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../React-16-New-feature-Summary-Links.html&quot;&gt;React 16 new feature&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://juejin.im/post/5c7df2e7f265da2d8a55d49
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="Links" scheme="https://catherineliyuankun.github.io/tags/Links/"/>
    
  </entry>
  
  <entry>
    <title>Markdown表格中单元格合并</title>
    <link href="https://catherineliyuankun.github.io/Markdown%E8%A1%A8%E6%A0%BC%E4%B8%AD%E5%8D%95%E5%85%83%E6%A0%BC%E5%90%88%E5%B9%B6.html"/>
    <id>https://catherineliyuankun.github.io/Markdown表格中单元格合并.html</id>
    <published>2019-09-03T17:56:29.000Z</published>
    <updated>2019-09-03T12:01:02.508Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://3nice.cc/2018/10/01/markdowntable/" target="_blank" rel="noopener">解决在Markdown中的表格单元格合并的问题</a></li><li><a href="https://www.zhihu.com/question/50267650" target="_blank" rel="noopener">markdown的表格语法能合并单元格吗？</a><br><a href="https://blog.csdn.net/loongshawn/article/details/72829090" target="_blank" rel="noopener">Markdown表格之合并单元格效果</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://3nice.cc/2018/10/01/markdowntable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;解决在Markdown中的表格单元格合并的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React 16 - DOM Attributes</title>
    <link href="https://catherineliyuankun.github.io/React-16-DOM-Attributes.html"/>
    <id>https://catherineliyuankun.github.io/React-16-DOM-Attributes.html</id>
    <published>2019-09-03T09:08:53.000Z</published>
    <updated>2019-09-03T06:29:26.309Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="React 16" scheme="https://catherineliyuankun.github.io/tags/React-16/"/>
    
  </entry>
  
  <entry>
    <title>React 16 - Portal</title>
    <link href="https://catherineliyuankun.github.io/React-16-Portal.html"/>
    <id>https://catherineliyuankun.github.io/React-16-Portal.html</id>
    <published>2019-09-03T09:07:35.000Z</published>
    <updated>2019-09-09T07:56:15.189Z</updated>
    
    <content type="html"><![CDATA[<p>转<a href="https://zhuanlan.zhihu.com/p/29880992" target="_blank" rel="noopener">传送门：React Portal</a>， 在这个基础上做了小的修改。</p><p>似乎所有说React Portal都直接用Portal这个单词，没听过这词的朋友可能觉得不知所云，其实，Portal可以有一个很形象的翻译——“传送门”。</p><h2 id="什么是传送门？">什么是传送门？</h2><p>曾经有一款游戏就叫做Portal，玩家手上一杆很厉害很科幻的枪，朝墙上开一枪，就可以开出两个“传送门”，人钻进这个传送门，可以从另一个传送门里走出来，也就是说，两个不同位置的传送门之间形成了对接。</p><p><img src="https://pic4.zhimg.com/80/v2-a650d2d42e0ed880c4413340ec961a27_hd.jpg" alt="传送门"></p><p>如果还不明白Portal是啥，那就拿范冰冰在《X战警：逆转未来》所演角色的GIF动图来看吧。<br><img src="https://pic1.zhimg.com/v2-89a003124def7b845832f3789ba8c4e8_b.jpg" alt="《X战警：逆转未来》"></p><p>你看一个哨兵机器人扑过来攻击一个X战警，范冰冰从一个传送门里神速穿越而来，顺手又甩出两个传送门，让哨兵机器人扑进了一个传送门，从另一个传送门一个踉跄掉了出来，从而救了那个X战警。</p><p>现在明白Portal是怎么回事了吧。</p><h2 id="为什么react需要传送门？">为什么React需要传送门？</h2><p>React Portal之所以叫Portal，因为做的就是和“传送门”一样的事情：<strong>render到一个组件里面去，实际改变的是网页上另一处的DOM结构</strong>。</p><p>在React的世界中，一切都是组件，用组件可以表示一切界面中发生的逻辑，不过，有些特例处理起来还比较麻烦，比如，某个组件在渲染时，在某种条件下需要显示一个对话框(Dialog)，这该怎么做呢？</p><p>最直观的做法，就是直接在JSX中把Dialog画出来，像下面代码的样子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo"</span>&gt;</span><br><span class="line">   &lt;div&gt; ... &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &#123; needDialog ? &lt;Dialog /</span>&gt; : <span class="literal">null</span> &#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>问题是，我们写一个Dialog组件，就这么渲染的话，Dialog最终渲染产生的HTML就存在于上面JSX产生的HTML一起了，类似下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo"</span>&gt;</span><br><span class="line">   &lt;div&gt; ... &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;div class="dialog"&gt;Dialog Content&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>可是问题来了，对于对话框，从用户感知角度，应该是一个独立的组件，通常应该显示在屏幕的最中间，现在Dialog被包在其他组件中，要用CSS的position属性控制Dialog位置，就要求从Dialog往上一直到body没有其他postion是relative的元素干扰，这……有点难为作为通用组件的Dialog，毕竟，谁管得住所有组件不用position呢。</p><p>还有一点，Dialog的样式，因为包在其他元素中，各种样式纠缠，CSS样式太容易搞成一坨浆糊了。</p><h3 id="when-to-use-react传送门？-liyuankun-增加">When to use React传送门？【liyuankun 增加】</h3><p>当父组件样式有 overflow: hidden 或者 z-index，但是你需要子组件看起来“break out”它所在的container. 例如dialogs, hover cards 和 tool-tips.</p><h3 id="react-16-之前怎么实现传送门？">React 16 之前怎么实现传送门？</h3><p>看样子这样搞局限很多啊，行不通，有没有其他办法？</p><h4 id="通过redux或者其他通讯方式">通过Redux或者其他通讯方式</h4><p>有一个其他办法，就是在React组件树的最顶层留一个元素专属于Dialog，然后通过Redux或者其他什么通讯方式给这个Dialog发送信号，让Dialog显示或者不显示。<br><img src="https://pic1.zhimg.com/80/v2-4022e89a8d7a22461e426cf6c653e18c_hd.jpg" alt="Dialog"><br>这种方法看起来还凑合着，但是，就这点事还要动用Redux有点高射炮打蚊子，而且，要控制两个不用位置的组件，好麻烦。</p><p>而且，如果我们把Dialog做成一个通用组件，希望里面的内容完全定制，这招就更加麻烦了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo"</span>&gt;</span><br><span class="line">  &lt;div&gt; ... &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &#123; needDialog ? </span></span><br><span class="line"><span class="regexp">    &lt;Dialog&gt; </span></span><br><span class="line"><span class="regexp">       &lt;header&gt;Any Header&lt;/</span>header&gt;</span><br><span class="line">       &lt;section&gt;Any content&lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Dialog&gt;</span><br><span class="line">    : <span class="literal">null</span> &#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>像上面那样，我们既希望在组件的JSX中选择使用Dialog，把Dialog用得像一个普通组件一样，但是又希望Dialog内容显示在另一个地方，就需要Portal上场了。</p><p>Portal就是建立一个“传送门”，让Dialog这样的组件在表示层和其他组件没有任何差异，但是渲染的东西却像经过传送门一样出现在另一个地方。</p><h4 id="react-15-api">React 15 API</h4><p>React在v16之前的传送门实现方法<br>在v16之前，实现“传送门”，要用到两个秘而不宣的React API</p><ul><li>unstable_renderSubtreeIntoContainer</li><li>unmountComponentAtNode</li></ul><p>第一个unstable_renderSubtreeIntoContainer，都带上前缀unstable了，就知道并不鼓励使用，但是没办法啊，不用也得用，还好React一直没有deprecate这个API，一直挺到v16直接支持portal。这个API的作用就是建立“传送门”，可以把JSX代表的组件结构塞到传送门里面去，让他们在传送门的另一端渲染出来。</p><p>第二个unmountComponentAtNode用来清理第一个API的副作用，通常在unmount的时候调用，不调用的话会造成资源泄露的。</p><p>一个通用的Dialog组件的实现差不多是这样，注意看renderPortal中的注释。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;unstable_renderSubtreeIntoContainer, unmountComponentAtNode&#125; </span><br><span class="line">  <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> doc = <span class="built_in">window</span>.document;</span><br><span class="line">    <span class="keyword">this</span>.node = doc.createElement(<span class="string">'div'</span>);</span><br><span class="line">    doc.body.appendChild(<span class="keyword">this</span>.node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.renderPortal(<span class="keyword">this</span>.props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">this</span>.renderPortal(<span class="keyword">this</span>.props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    unmountComponentAtNode(<span class="keyword">this</span>.node);</span><br><span class="line">    <span class="built_in">window</span>.document.body.removeChild(<span class="keyword">this</span>.node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderPortal(props) &#123;</span><br><span class="line">    unstable_renderSubtreeIntoContainer(</span><br><span class="line">      <span class="keyword">this</span>, <span class="comment">//代表当前组件</span></span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog"</span>&gt;</span><br><span class="line">        &#123;props.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;, /</span><span class="regexp">/ 塞进传送门的JSX</span></span><br><span class="line"><span class="regexp">      this.node /</span><span class="regexp">/ 传送门另一端的DOM node</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>首先，render函数不要返回有意义的JSX，也就说说这个组件通过正常生命周期什么都不画，要是画了，那画出来的HTML/DOM就直接出现在使用Dialog的位置了，这不是我们想要的。</p><p>在componentDidMount里面，利用原生API来在body上创建一个div，这个div的样式绝对不会被其他元素的样式干扰。</p><p>然后，无论componentDidMount还是componentDidUpdate，都调用一个renderPortal来往“传送门”里塞东西。</p><p>总结，这个Dialog组件做得事情是这样：</p><ol><li>它什么都不给自己画，render返回一个null就够了；</li><li>它做得事情是通过调用renderPortal把要画的东西画在DOM树上另一个角落。</li></ol><p>在renderPortal中，利用unstable_renderSubtreeIntoContainer函数往直前创建的div里塞JSX，这里我们用的JSX是这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog"</span>&gt;</span><br><span class="line">     &#123;props.children&#125;</span><br><span class="line"> &lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>因为是吧children画出来，所以使用Dialog可以加上任意的子组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Dialog&gt;</span><br><span class="line">     What ever shit</span><br><span class="line">     &lt;div&gt;Hello&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     &lt;p&gt;World&lt;/</span>p&gt;</span><br><span class="line"> &lt;<span class="regexp">/Dialog&gt;</span></span><br></pre></td></tr></table></figure><p>你看，所谓React Portal，就是能够表面上渲染在一个地方，实际上渲染到了另一个地方。<br><img src="https://pic4.zhimg.com/80/v2-60771cc0b94e780ca29bdd72f2761d57_hd.jpg" alt="Portal"></p><p>是不是感觉好厉害，不光好厉害，而且像Dialog这样的场景Portal简直就是必不可少。</p><p>到了v16，React干脆直接支持Portal，当然，v15还将被使用一段时间，所以大家看了上面的内容也不算浪费时间:-)</p><h2 id="react-v16的portal支持">React v16的Portal支持</h2><p>在v16中，使用Portal创建Dialog组件简单多了，不需要牵扯到componentDidMount、componentDidUpdate，也不用调用API清理Portal，关键代码在render中，像下面这样就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createPortal&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(...arguments);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> doc = <span class="built_in">window</span>.document;</span><br><span class="line">    <span class="keyword">this</span>.node = doc.createElement(<span class="string">'div'</span>);</span><br><span class="line">    doc.body.appendChild(<span class="keyword">this</span>.node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> createPortal(</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog"</span>&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;, /</span><span class="regexp">/塞进传送门的JSX</span></span><br><span class="line"><span class="regexp">      this.node /</span><span class="regexp">/传送门的另一端DOM node</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  componentWillUnmount() &#123;</span></span><br><span class="line"><span class="regexp">    window.document.body.removeChild(this.node);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>v16提供createPortal函数来创建“传送门”，我个人觉得这个函数应该叫renderPortal好一些，因为组件的render函数除了mount时会被调用，update时也会被调用，update时还叫createPortal有点不大合适。</p><h2 id="穿越portal的事件冒泡">穿越Portal的事件冒泡</h2><p>v16之前的React Portal实现方法，有一个小小的缺陷，就是Portal是单向的，内容通过Portal传到另一个出口，在那个出口DOM上发生的事件是不会冒泡传送回进入那一端的。</p><p>也就是说，这样的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onClick=&#123;onDialogClick&#125;&gt;   </span><br><span class="line">   &lt;Dialog&gt;</span><br><span class="line">     What ever shit</span><br><span class="line">   &lt;<span class="regexp">/Dialog&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>在Dialog画出的内容上点击，onDialogClick是不会被触发的。</p><p>当然，这只是一个小小的缺陷，大部分场景下事件不传过来也没什么大问题。</p><p>在v16中，通过Portal渲染出去的DOM，事件是会冒泡从传送门的入口端冒出来的，上面的onDialogClick也就会被调用到了。</p><h3 id="why事件冒泡可以到react-parent-liyuankun-增加">why事件冒泡可以到react parent 【liyuankun 增加】</h3><p>可以看这个例子：<a href="https://codepen.io/catherineliyuankun/pen/oNvpxKv" target="_blank" rel="noopener">Dialog 嵌套 Dialog demo</a></p><p>从真实的DOM结构上来看，Dialog组件中的onClick事件不应该被</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span>Here contain Dialog:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件捕获。<br>但从虚拟DOM的结构上来看，Dialog却是&quot;container&quot;组件的子节点，事件冒泡是遵循虚拟DOM的.</p><p>真实的DOM结构:<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/React-16-Portal/Real%20Dom%201.png" alt="真实的DOM结构1"><br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/React-16-Portal/Real%20Dom%202.png" alt="真实的DOM结构2"></p><p>虚拟DOM的结构:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onClick=&#123;onDialogClick&#125;&gt;</span><br><span class="line">  &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">    Here contain Dialog:</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Dialog onClick=&#123;onDialog1Click&#125;&gt;</span></span><br><span class="line"><span class="regexp">     &lt;div&gt;Dialog 1&lt;/</span>div&gt;</span><br><span class="line">      &lt;Dialog onClick=&#123;onDialog2Click&#125;&gt;</span><br><span class="line">        &lt;div&gt;Dialog <span class="number">2</span> Inside Dialog <span class="number">1</span> &lt;<span class="regexp">/div&gt;    </span></span><br><span class="line"><span class="regexp">      &lt;/</span>Dialog&gt;</span><br><span class="line">  &lt;<span class="regexp">/Dialog&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>React v16直接支持Portal，是因为Portal这个功能真的是必不可少，不然对话框这样的场景都没法应付。</p><h2 id="reference-links">Reference Links</h2><ul><li><a href="https://react.docschina.org/docs/portals.html" target="_blank" rel="noopener">官网文档中文版</a></li><li><a href="https://zhuanlan.zhihu.com/p/29880992" target="_blank" rel="noopener">传送门：React Portal</a></li><li><a href="https://www.beautifulcode.co/blog/46-understanding-portals-in-react" target="_blank" rel="noopener">Understanding Portals in React</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29880992&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门：React Portal&lt;/a&gt;， 在这个基础上做了小的修改。&lt;/p&gt;
&lt;p&gt;似乎所有说React Por
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="React 16" scheme="https://catherineliyuankun.github.io/tags/React-16/"/>
    
  </entry>
  
  <entry>
    <title>React 16 - New feature Summary Links</title>
    <link href="https://catherineliyuankun.github.io/React-16-New-feature-Summary-Links.html"/>
    <id>https://catherineliyuankun.github.io/React-16-New-feature-Summary-Links.html</id>
    <published>2019-09-03T09:06:45.000Z</published>
    <updated>2019-11-04T17:06:42.398Z</updated>
    
    <content type="html"><![CDATA[<p>React<br><a href="https://github.com/facebook/react/blob/master/CHANGELOG.md" target="_blank" rel="noopener">https://github.com/facebook/react/blob/master/CHANGELOG.md</a></p><p>VersionFeatureHostTech Article<br>16.0.0 (September 26, 2017)</p><table><thead><tr><th>Version</th><th>Feature</th><th>Article Links</th></tr></thead><tbody><tr><td>16.0.0 (September 26, 2017)</td><td><a href="https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html" target="_blank" rel="noopener">Error boundaries</a></td><td><a href="../React-16-Error-Handling.html">Error boundaries</a></td></tr><tr><td>-</td><td>First-class support for declaratively rendering a subtree into another DOM node with <a href="https://reactjs.org/docs/portals.html#event-bubbling-through-portals" target="_blank" rel="noopener">ReactDOM.createPortal()</a></td><td><a href="../React-16-Portal.html">Portal</a></td></tr><tr><td>-</td><td><a href="https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html" target="_blank" rel="noopener">React DOM now allows passing non-standard attributes</a></td><td>DOM Attributes</td></tr><tr><td>16.2.0 (November 28, 2017)</td><td><a href="https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html" target="_blank" rel="noopener">Improved Support for Fragments</a></td><td>Fragments</td></tr><tr><td><a href="https://reactjs.org/blog/2018/03/29/react-v-16-3.html" target="_blank" rel="noopener">16.3.0 (March 29, 2018)</a></td><td><a href="https://reactjs.org/docs/context.html#contextprovider" target="_blank" rel="noopener">New officially supported context API</a></td><td>context API</td></tr><tr><td>16.2.0 (November 28, 2017)</td><td><a href="https://reactjs.org/docs/react-api.html#reactcreateref" target="_blank" rel="noopener">New React.createRef()</a></td><td>React.createRef</td></tr><tr><td>-</td><td><a href="https://reactjs.org/docs/react-api.html#reactforwardref" target="_blank" rel="noopener">New React.forwardRef()</a></td><td>React.forwardRef</td></tr><tr><td>-</td><td><a href="https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html" target="_blank" rel="noopener">StrictMode Component</a></td><td>Fragments</td></tr><tr><td>-</td><td>New lifecycles Add a new getDerivedStateFromProps() lifecycle and UNSAFE_ aliases for the legacy lifecycles.</td><td></td></tr></tbody></table><p>Add a new getSnapshotBeforeUpdate() lifecycle.<br><a href="https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html" target="_blank" rel="noopener">https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html</a> <a href="https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html" target="_blank" rel="noopener">Improved Support for Fragments</a> | Fragments</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React&lt;br&gt;
&lt;a href=&quot;https://github.com/facebook/react/blob/master/CHANGELOG.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="React 16" scheme="https://catherineliyuankun.github.io/tags/React-16/"/>
    
  </entry>
  
</feed>
