<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岚</title>
  <icon>https://www.gravatar.com/avatar/0e57272b72bf1a283c89417a9bc99517</icon>
  <subtitle>Talk to myself.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://catherineliyuankun.github.io/"/>
  <updated>2019-09-09T03:45:51.186Z</updated>
  <id>https://catherineliyuankun.github.io/</id>
  
  <author>
    <name>Yuankun Li</name>
    <email>muzilan1@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React all articles</title>
    <link href="https://catherineliyuankun.github.io/2019/09/09/React-all-articles/"/>
    <id>https://catherineliyuankun.github.io/2019/09/09/React-all-articles/</id>
    <published>2019-09-09T03:44:38.000Z</published>
    <updated>2019-09-09T03:45:51.186Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5c7df2e7f265da2d8a55d49d" target="_blank" rel="noopener">【React深入】React事件机制</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5c7df2e7f265da2d8a55d49d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【React深入】React事件机制&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="Links" scheme="https://catherineliyuankun.github.io/tags/Links/"/>
    
  </entry>
  
  <entry>
    <title>Markdown表格中单元格合并</title>
    <link href="https://catherineliyuankun.github.io/2019/09/03/Markdown%E8%A1%A8%E6%A0%BC%E4%B8%AD%E5%8D%95%E5%85%83%E6%A0%BC%E5%90%88%E5%B9%B6/"/>
    <id>https://catherineliyuankun.github.io/2019/09/03/Markdown表格中单元格合并/</id>
    <published>2019-09-03T11:56:29.000Z</published>
    <updated>2019-09-03T12:01:02.508Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://3nice.cc/2018/10/01/markdowntable/" target="_blank" rel="noopener">解决在Markdown中的表格单元格合并的问题</a></li><li><a href="https://www.zhihu.com/question/50267650" target="_blank" rel="noopener">markdown的表格语法能合并单元格吗？</a><br><a href="https://blog.csdn.net/loongshawn/article/details/72829090" target="_blank" rel="noopener">Markdown表格之合并单元格效果</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://3nice.cc/2018/10/01/markdowntable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;解决在Markdown中的表格单元格合并的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React 16 - DOM Attributes</title>
    <link href="https://catherineliyuankun.github.io/2019/09/03/React-16-DOM-Attributes/"/>
    <id>https://catherineliyuankun.github.io/2019/09/03/React-16-DOM-Attributes/</id>
    <published>2019-09-03T03:08:53.000Z</published>
    <updated>2019-09-03T06:29:26.309Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="React 16" scheme="https://catherineliyuankun.github.io/tags/React-16/"/>
    
  </entry>
  
  <entry>
    <title>React 16 - Portal</title>
    <link href="https://catherineliyuankun.github.io/2019/09/03/React-16-Portal/"/>
    <id>https://catherineliyuankun.github.io/2019/09/03/React-16-Portal/</id>
    <published>2019-09-03T03:07:35.000Z</published>
    <updated>2019-09-09T07:48:31.175Z</updated>
    
    <content type="html"><![CDATA[<p>转<a href="https://zhuanlan.zhihu.com/p/29880992" target="_blank" rel="noopener">传送门：React Portal</a>， 在这个基础上做了小的修改。</p><p>似乎所有说React Portal都直接用Portal这个单词，没听过这词的朋友可能觉得不知所云，其实，Portal可以有一个很形象的翻译——“传送门”。</p><h2 id="什么是传送门？">什么是传送门？</h2><p>曾经有一款游戏就叫做Portal，玩家手上一杆很厉害很科幻的枪，朝墙上开一枪，就可以开出两个“传送门”，人钻进这个传送门，可以从另一个传送门里走出来，也就是说，两个不同位置的传送门之间形成了对接。</p><p><img src="https://pic4.zhimg.com/80/v2-a650d2d42e0ed880c4413340ec961a27_hd.jpg" alt="传送门"></p><p>如果还不明白Portal是啥，那就拿范冰冰在《X战警：逆转未来》所演角色的GIF动图来看吧。<br><img src="https://pic1.zhimg.com/v2-89a003124def7b845832f3789ba8c4e8_b.jpg" alt="《X战警：逆转未来》"></p><p>你看一个哨兵机器人扑过来攻击一个X战警，范冰冰从一个传送门里神速穿越而来，顺手又甩出两个传送门，让哨兵机器人扑进了一个传送门，从另一个传送门一个踉跄掉了出来，从而救了那个X战警。</p><p>现在明白Portal是怎么回事了吧。</p><h2 id="为什么react需要传送门？">为什么React需要传送门？</h2><p>React Portal之所以叫Portal，因为做的就是和“传送门”一样的事情：<strong>render到一个组件里面去，实际改变的是网页上另一处的DOM结构</strong>。</p><p>在React的世界中，一切都是组件，用组件可以表示一切界面中发生的逻辑，不过，有些特例处理起来还比较麻烦，比如，某个组件在渲染时，在某种条件下需要显示一个对话框(Dialog)，这该怎么做呢？</p><p>最直观的做法，就是直接在JSX中把Dialog画出来，像下面代码的样子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo"</span>&gt;</span><br><span class="line">   &lt;div&gt; ... &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &#123; needDialog ? &lt;Dialog /</span>&gt; : <span class="literal">null</span> &#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>问题是，我们写一个Dialog组件，就这么渲染的话，Dialog最终渲染产生的HTML就存在于上面JSX产生的HTML一起了，类似下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo"</span>&gt;</span><br><span class="line">   &lt;div&gt; ... &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;div class="dialog"&gt;Dialog Content&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>可是问题来了，对于对话框，从用户感知角度，应该是一个独立的组件，通常应该显示在屏幕的最中间，现在Dialog被包在其他组件中，要用CSS的position属性控制Dialog位置，就要求从Dialog往上一直到body没有其他postion是relative的元素干扰，这……有点难为作为通用组件的Dialog，毕竟，谁管得住所有组件不用position呢。</p><p>还有一点，Dialog的样式，因为包在其他元素中，各种样式纠缠，CSS样式太容易搞成一坨浆糊了。</p><h3 id="when-to-use-react传送门？-liyuankun-增加">When to use React传送门？【liyuankun 增加】</h3><p>当父组件样式有 overflow: hidden 或者 z-index，但是你需要子组件看起来“break out”它所在的container. 例如dialogs, hover cards 和 tool-tips.</p><h3 id="react-16-之前怎么实现传送门？">React 16 之前怎么实现传送门？</h3><p>看样子这样搞局限很多啊，行不通，有没有其他办法？</p><h4 id="通过redux或者其他通讯方式">通过Redux或者其他通讯方式</h4><p>有一个其他办法，就是在React组件树的最顶层留一个元素专属于Dialog，然后通过Redux或者其他什么通讯方式给这个Dialog发送信号，让Dialog显示或者不显示。<br><img src="https://pic1.zhimg.com/80/v2-4022e89a8d7a22461e426cf6c653e18c_hd.jpg" alt="Dialog"><br>这种方法看起来还凑合着，但是，就这点事还要动用Redux有点高射炮打蚊子，而且，要控制两个不用位置的组件，好麻烦。</p><p>而且，如果我们把Dialog做成一个通用组件，希望里面的内容完全定制，这招就更加麻烦了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo"</span>&gt;</span><br><span class="line">  &lt;div&gt; ... &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &#123; needDialog ? </span></span><br><span class="line"><span class="regexp">    &lt;Dialog&gt; </span></span><br><span class="line"><span class="regexp">       &lt;header&gt;Any Header&lt;/</span>header&gt;</span><br><span class="line">       &lt;section&gt;Any content&lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Dialog&gt;</span><br><span class="line">    : <span class="literal">null</span> &#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>像上面那样，我们既希望在组件的JSX中选择使用Dialog，把Dialog用得像一个普通组件一样，但是又希望Dialog内容显示在另一个地方，就需要Portal上场了。</p><p>Portal就是建立一个“传送门”，让Dialog这样的组件在表示层和其他组件没有任何差异，但是渲染的东西却像经过传送门一样出现在另一个地方。</p><h4 id="react-15-api">React 15 API</h4><p>React在v16之前的传送门实现方法<br>在v16之前，实现“传送门”，要用到两个秘而不宣的React API</p><ul><li>unstable_renderSubtreeIntoContainer</li><li>unmountComponentAtNode</li></ul><p>第一个unstable_renderSubtreeIntoContainer，都带上前缀unstable了，就知道并不鼓励使用，但是没办法啊，不用也得用，还好React一直没有deprecate这个API，一直挺到v16直接支持portal。这个API的作用就是建立“传送门”，可以把JSX代表的组件结构塞到传送门里面去，让他们在传送门的另一端渲染出来。</p><p>第二个unmountComponentAtNode用来清理第一个API的副作用，通常在unmount的时候调用，不调用的话会造成资源泄露的。</p><p>一个通用的Dialog组件的实现差不多是这样，注意看renderPortal中的注释。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;unstable_renderSubtreeIntoContainer, unmountComponentAtNode&#125; </span><br><span class="line">  <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> doc = <span class="built_in">window</span>.document;</span><br><span class="line">    <span class="keyword">this</span>.node = doc.createElement(<span class="string">'div'</span>);</span><br><span class="line">    doc.body.appendChild(<span class="keyword">this</span>.node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.renderPortal(<span class="keyword">this</span>.props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">this</span>.renderPortal(<span class="keyword">this</span>.props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    unmountComponentAtNode(<span class="keyword">this</span>.node);</span><br><span class="line">    <span class="built_in">window</span>.document.body.removeChild(<span class="keyword">this</span>.node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderPortal(props) &#123;</span><br><span class="line">    unstable_renderSubtreeIntoContainer(</span><br><span class="line">      <span class="keyword">this</span>, <span class="comment">//代表当前组件</span></span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog"</span>&gt;</span><br><span class="line">        &#123;props.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;, /</span><span class="regexp">/ 塞进传送门的JSX</span></span><br><span class="line"><span class="regexp">      this.node /</span><span class="regexp">/ 传送门另一端的DOM node</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>首先，render函数不要返回有意义的JSX，也就说说这个组件通过正常生命周期什么都不画，要是画了，那画出来的HTML/DOM就直接出现在使用Dialog的位置了，这不是我们想要的。</p><p>在componentDidMount里面，利用原生API来在body上创建一个div，这个div的样式绝对不会被其他元素的样式干扰。</p><p>然后，无论componentDidMount还是componentDidUpdate，都调用一个renderPortal来往“传送门”里塞东西。</p><p>总结，这个Dialog组件做得事情是这样：</p><ol><li>它什么都不给自己画，render返回一个null就够了；</li><li>它做得事情是通过调用renderPortal把要画的东西画在DOM树上另一个角落。</li></ol><p>在renderPortal中，利用unstable_renderSubtreeIntoContainer函数往直前创建的div里塞JSX，这里我们用的JSX是这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog"</span>&gt;</span><br><span class="line">     &#123;props.children&#125;</span><br><span class="line"> &lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>因为是吧children画出来，所以使用Dialog可以加上任意的子组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Dialog&gt;</span><br><span class="line">     What ever shit</span><br><span class="line">     &lt;div&gt;Hello&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     &lt;p&gt;World&lt;/</span>p&gt;</span><br><span class="line"> &lt;<span class="regexp">/Dialog&gt;</span></span><br></pre></td></tr></table></figure><p>你看，所谓React Portal，就是能够表面上渲染在一个地方，实际上渲染到了另一个地方。<br><img src="https://pic4.zhimg.com/80/v2-60771cc0b94e780ca29bdd72f2761d57_hd.jpg" alt="Portal"></p><p>是不是感觉好厉害，不光好厉害，而且像Dialog这样的场景Portal简直就是必不可少。</p><p>到了v16，React干脆直接支持Portal，当然，v15还将被使用一段时间，所以大家看了上面的内容也不算浪费时间:-)</p><h2 id="react-v16的portal支持">React v16的Portal支持</h2><p>在v16中，使用Portal创建Dialog组件简单多了，不需要牵扯到componentDidMount、componentDidUpdate，也不用调用API清理Portal，关键代码在render中，像下面这样就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createPortal&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(...arguments);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> doc = <span class="built_in">window</span>.document;</span><br><span class="line">    <span class="keyword">this</span>.node = doc.createElement(<span class="string">'div'</span>);</span><br><span class="line">    doc.body.appendChild(<span class="keyword">this</span>.node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> createPortal(</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog"</span>&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;, /</span><span class="regexp">/塞进传送门的JSX</span></span><br><span class="line"><span class="regexp">      this.node /</span><span class="regexp">/传送门的另一端DOM node</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  componentWillUnmount() &#123;</span></span><br><span class="line"><span class="regexp">    window.document.body.removeChild(this.node);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>v16提供createPortal函数来创建“传送门”，我个人觉得这个函数应该叫renderPortal好一些，因为组件的render函数除了mount时会被调用，update时也会被调用，update时还叫createPortal有点不大合适。</p><h2 id="穿越portal的事件冒泡">穿越Portal的事件冒泡</h2><p>v16之前的React Portal实现方法，有一个小小的缺陷，就是Portal是单向的，内容通过Portal传到另一个出口，在那个出口DOM上发生的事件是不会冒泡传送回进入那一端的。</p><p>也就是说，这样的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onClick=&#123;onDialogClick&#125;&gt;   </span><br><span class="line">   &lt;Dialog&gt;</span><br><span class="line">     What ever shit</span><br><span class="line">   &lt;<span class="regexp">/Dialog&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>在Dialog画出的内容上点击，onDialogClick是不会被触发的。</p><p>当然，这只是一个小小的缺陷，大部分场景下事件不传过来也没什么大问题。</p><p>在v16中，通过Portal渲染出去的DOM，事件是会冒泡从传送门的入口端冒出来的，上面的onDialogClick也就会被调用到了。</p><h3 id="why事件冒泡可以到react-parent-liyuankun-增加">why事件冒泡可以到react parent 【liyuankun 增加】</h3><p>从真实的DOM结构上来看，Dialog组件中的onClick事件不应该被在<div class="container">Here contain Dialog:</div>组件捕获。<br>但从虚拟DOM的结构上来看，Dialog却是&quot;container&quot;组件的子节点，事件冒泡是遵循虚拟DOM的.</p><p>真实的DOM结构:<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/React-16-Portal/Real%20Dom%201.png" alt="真实的DOM结构1"><br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/React-16-Portal/Real%20Dom%202.png" alt="真实的DOM结构2"></p><p>虚拟DOM的结构:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onClick=&#123;onDialogClick&#125;&gt;</span><br><span class="line">  &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">    Here contain Dialog:</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Dialog onClick=&#123;onDialog1Click&#125;&gt;</span></span><br><span class="line"><span class="regexp">     &lt;div&gt;Dialog 1&lt;/</span>div&gt;</span><br><span class="line">      &lt;Dialog onClick=&#123;onDialog2Click&#125;&gt;</span><br><span class="line">        &lt;div&gt;Dialog <span class="number">2</span> Inside Dialog <span class="number">1</span> &lt;<span class="regexp">/div&gt;    </span></span><br><span class="line"><span class="regexp">      &lt;/</span>Dialog&gt;</span><br><span class="line">  &lt;<span class="regexp">/Dialog&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><a href="https://codepen.io/catherineliyuankun/pen/oNvpxKv" target="_blank" rel="noopener">Dialog 嵌套 Dialog demo</a></p><h2 id="总结">总结</h2><p>React v16直接支持Portal，是因为Portal这个功能真的是必不可少，不然对话框这样的场景都没法应付。</p><h2 id="reference-links">Reference Links</h2><ul><li><a href="https://react.docschina.org/docs/portals.html" target="_blank" rel="noopener">官网文档中文版</a></li><li><a href="https://zhuanlan.zhihu.com/p/29880992" target="_blank" rel="noopener">传送门：React Portal</a></li><li><a href="https://www.beautifulcode.co/blog/46-understanding-portals-in-react" target="_blank" rel="noopener">Understanding Portals in React</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29880992&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门：React Portal&lt;/a&gt;， 在这个基础上做了小的修改。&lt;/p&gt;
&lt;p&gt;似乎所有说React Por
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="React 16" scheme="https://catherineliyuankun.github.io/tags/React-16/"/>
    
  </entry>
  
  <entry>
    <title>React 16 - New feature Summary Links</title>
    <link href="https://catherineliyuankun.github.io/2019/09/03/React-16-New-feature-Summary-Links/"/>
    <id>https://catherineliyuankun.github.io/2019/09/03/React-16-New-feature-Summary-Links/</id>
    <published>2019-09-03T03:06:45.000Z</published>
    <updated>2019-09-03T13:11:20.626Z</updated>
    
    <content type="html"><![CDATA[<p>React<br><a href="https://github.com/facebook/react/blob/master/CHANGELOG.md" target="_blank" rel="noopener">https://github.com/facebook/react/blob/master/CHANGELOG.md</a></p><p>VersionFeatureHostTech Article<br>16.0.0 (September 26, 2017)</p><table><thead><tr><th>Version</th><th>Feature</th><th>Article Links</th></tr></thead><tbody><tr><td>16.0.0 (September 26, 2017)</td><td><a href="https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html" target="_blank" rel="noopener">Error boundaries</a></td><td><a href="../React-16-Error-Handling/">Error boundaries</a></td></tr><tr><td>-</td><td>First-class support for declaratively rendering a subtree into another DOM node with ReactDOM.createPortal()</td><td><a href="../React-16-Portal/">Portal</a></td></tr><tr><td>-</td><td><a href="https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html" target="_blank" rel="noopener">React DOM now allows passing non-standard attributes</a></td><td>DOM Attributes</td></tr><tr><td>16.2.0 (November 28, 2017)</td><td><a href="https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html" target="_blank" rel="noopener">Improved Support for Fragments</a></td><td>Fragments</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React&lt;br&gt;
&lt;a href=&quot;https://github.com/facebook/react/blob/master/CHANGELOG.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="React 16" scheme="https://catherineliyuankun.github.io/tags/React-16/"/>
    
  </entry>
  
  <entry>
    <title>React 16 - Error Handling</title>
    <link href="https://catherineliyuankun.github.io/2019/09/03/React-16-Error-Handling/"/>
    <id>https://catherineliyuankun.github.io/2019/09/03/React-16-Error-Handling/</id>
    <published>2019-09-03T03:06:09.000Z</published>
    <updated>2019-09-03T13:12:15.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-15：">React 15：</h2><p>渲染过程中有出错，直接crash整个页面，并且错误信息不明确，可读性差.<br>一旦某个组件发生错误，整个组件树将会从根节点被unmount下来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuggyCounter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'I am crash'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">&#123;counter&#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">      counter: counter + <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.counter === <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="comment">// Simulate a JS error</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'I crashed!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;this.state.counter&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;b&gt;</span><br><span class="line">          This is an example <span class="keyword">of</span> error boundaries <span class="keyword">in</span> React <span class="number">16.</span></span><br><span class="line">          &lt;br /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          Click on the numbers to increase the counters.</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;hr /</span>&gt;</span><br><span class="line">        &lt;p&gt;These two counters are inside the same error boundary. If one crashes, the error boundary will replace both <span class="keyword">of</span> them.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;BuggyCounter /</span>&gt;</span><br><span class="line">      &lt;hr /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;App /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="demo地址"><a href="https://codepen.io/anon/pen/ErBjZM?editors=0010" target="_blank" rel="noopener">demo地址</a></h3><p>比如上面这个App，可以看到子组件BuggyCounter出了点问题，在没有Error Boundary的时候，整个App都会crash掉，所以显示白屏。</p><h2 id="react-16：">React 16：</h2><p>React之前没有提供一种合适的处理组件错误的方法，而React16.0中通过Error Boundaries来处理组件内部的错误，从而可以修正错误组件。<br>用于捕获子组件树的组件异常（即错误边界只可以捕获组件在树中比他低的组件错误。），记录错误并展示一个用Error Boundary提供的内容替代错误组件。</p><h3 id="捕获范围：">捕获范围：</h3><p>渲染期间<br>生命周期内<br>整个组件树构造函数内</p><h3 id="如何使用：">如何使用：</h3><p>最佳实践：</p><ul><li>如果一个 class 组件中定义了 static getDerivedStateFromError() 或 componentDidCatch() 这两个生命周期方法中的任意一个（或两个）时，那么它就变成一个错误边界。当抛出错误后，请使用 static getDerivedStateFromError() 渲染备用 UI ，使用 componentDidCatch() 打印错误信息。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromError(error) &#123;</span><br><span class="line">    <span class="comment">// 更新 state 使下一次渲染能够显示降级后的 UI</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="comment">// 你同样可以将错误日志上报给服务器</span></span><br><span class="line">    logErrorToMyService(error, info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) &#123;</span><br><span class="line">      <span class="comment">// 你可以自定义降级后的 UI 并渲染</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Something went wrong.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将ErrorBoundary抽象为一个公用的组件类， 我们可以在容易出错的组件外使用ErrorBoundary将它包裹起来。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ErrorBoundary&gt;</span><br><span class="line">  &lt;MyWidget /&gt;</span><br><span class="line">&lt;<span class="regexp">/ErrorBoundary&gt;</span></span><br></pre></td></tr></table></figure><h3 id="componentdidcatch-生命周期函数">componentDidCatch（）生命周期函数</h3><p>componentDidCatch是一个新的生命周期函数，当组件有了这个生命周期函数，就成为了一个Error Boundaries。下面我们来看componnetDidCatch()中的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">componentDidCatch(error, info) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>error参数，表示的是被抛出的错误的信息，而info是一个对象包含了组件堆栈中的信息（也就是在发生错误的子组件中层层传递错误信息，到顶层的Error Boundaries，每一层中的组件名）。</p><h3 id="component-stack-traces">Component Stack Traces</h3><p>下面我们来看组件堆栈轨迹，我们假设这样一个结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;ErrorBoundary&gt;</span><br><span class="line">        &lt;Child&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ErrorBoundary&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/App&gt;</span></span><br></pre></td></tr></table></figure><p>如果在Child组件中发生了js错误，那么堆栈的报错信息应该如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">the error is located at :</span><br><span class="line">     <span class="keyword">in</span> Child  (created by App)</span><br><span class="line">     <span class="keyword">in</span> ErrorBoundary(created by App)</span><br><span class="line">     <span class="keyword">in</span> div (created by App)</span><br><span class="line">     <span class="keyword">in</span> App</span><br></pre></td></tr></table></figure><p>如果需要报错信息显示错误组件所在的具体的行数和位置，可以使用babel-plugin-transform-react-jsx-source插件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先定一个组件ErrorBoundary</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">error</span>: <span class="literal">null</span>, <span class="attr">errorInfo</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidCatch(error, errorInfo) &#123;</span><br><span class="line">    <span class="comment">// Catch errors in any components below and re-render with error message</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      error: error,</span><br><span class="line">      errorInfo: errorInfo</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// You can also log error messages to an error reporting service here</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 有错误的时候展示回退</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.errorInfo) &#123;</span><br><span class="line">      <span class="comment">// Error path</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h2&gt;Something went wrong.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">          &lt;details style=&#123;&#123; whiteSpace: 'pre-wrap' &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &#123;this.state.error &amp;&amp; this.state.error.toString()&#125;</span></span><br><span class="line"><span class="regexp">            &lt;br /</span>&gt;</span><br><span class="line">            &#123;<span class="keyword">this</span>.state.errorInfo.componentStack&#125;</span><br><span class="line">          &lt;<span class="regexp">/details&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 正常的话，直接展示组件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuggyCounter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'I am crash'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">&#123;counter&#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">      counter: counter + <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.counter === <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="comment">// Simulate a JS error</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'I crashed!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;this.state.counter&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;b&gt;</span><br><span class="line">          This is an example <span class="keyword">of</span> error boundaries <span class="keyword">in</span> React <span class="number">16.</span></span><br><span class="line">          &lt;br /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          Click on the numbers to increase the counters.</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;hr /</span>&gt;</span><br><span class="line">        &lt;ErrorBoundary&gt;</span><br><span class="line">        &lt;p&gt;These two counters are inside the same error boundary. If one crashes, the error boundary will replace both <span class="keyword">of</span> them.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;BuggyCounter /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/ErrorBoundary&gt;</span></span><br><span class="line"><span class="regexp">      &lt;hr /</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;App /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="demo地址-v2"><a href="https://codepen.io/gaearon/pen/wqvxGa?editors=0010" target="_blank" rel="noopener">demo地址</a></h3><p>可以看到加上Error Boundary之后，除了出错的组件，其他的地方都不受影响。</p><p>而且它很清晰的告诉我们是哪个组件发生了错误。</p><h3 id="注意事项：">注意事项：</h3><p>Error Boundary无法捕获下面的错误：</p><ol><li>事件函数里的错误</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">error</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Do something that could throw</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; error &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Caught an error.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，handleClick方法里面发生的错误，Error Boundary是捕获不到的。因为它不发生在渲染阶段，所以采用try/catch来捕获。</p><ol start="2"><li>异步代码（例如setTimeout 或 requestAnimationFrame 回调函数）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">     render() &#123;</span><br><span class="line">        <span class="comment">// 此错误无法被捕获，渲染时组件正常返回 `&lt;div&gt;&lt;/div&gt;`</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>服务端渲染</li></ol><p>因为服务器渲染不支持Error Boundary</p><ol start="4"><li>Error Boundary自身抛出来的错误 （而不是其子组件）</li></ol><h3 id="错误边界放在哪里">错误边界放在哪里?</h3><p>一般来说，有两个地方：</p><ol><li><p>可以放在顶层，告诉用户有东西出错。但是我个人不建议这样，这感觉失去了错误边界的意义。因为有一个组件出错了，其他正常的也没办法正常显示了</p></li><li><p>包在子组件外面，保护其他应用不崩溃。</p></li></ol><h2 id="reference-links">Reference Links</h2><ul><li><a href="https://react.docschina.org/docs/error-boundaries.html" target="_blank" rel="noopener">官网文档中文版</a></li><li><a href="https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html" target="_blank" rel="noopener">React Error Handling in React 16</a></li><li><a href="https://my.oschina.net/u/2332658/blog/3019283" target="_blank" rel="noopener">React16新特性</a></li><li><a href="https://zhuanlan.zhihu.com/p/57544233" target="_blank" rel="noopener">React 16 新特性全解（上）</a></li><li><a href="https://blog.csdn.net/liwusen/article/details/78521006" target="_blank" rel="noopener">React 16.0中的新特性——Error Boundaries及其注意点</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;react-15：&quot;&gt;React 15：&lt;/h2&gt;
&lt;p&gt;渲染过程中有出错，直接crash整个页面，并且错误信息不明确，可读性差.&lt;br&gt;
一旦某个组件发生错误，整个组件树将会从根节点被unmount下来。&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="React 16" scheme="https://catherineliyuankun.github.io/tags/React-16/"/>
    
  </entry>
  
  <entry>
    <title>cryptic abbreviations of Github comments</title>
    <link href="https://catherineliyuankun.github.io/2019/08/08/cryptic-abbreviations-of-Github-comments/"/>
    <id>https://catherineliyuankun.github.io/2019/08/08/cryptic-abbreviations-of-Github-comments/</id>
    <published>2019-08-08T12:31:39.000Z</published>
    <updated>2019-08-08T12:53:47.788Z</updated>
    
    <content type="html"><![CDATA[<p>我们Github code review 的时候第一次遇到这些缩写时，一脸懵逼，一无所知脸的偷偷去搜搜是什么意思？<br>这里整理一下这些缩写都是什么含义，以后我们也可以欢快地装逼了，装作娴熟的司机们来使用缩写来达到提高逼格的效果~~</p><ul><li>PR: Pull Request. 拉取请求，给其他项目提交代码</li><li>LGTM: Looks Good To Me. <s>朕知道了</s> 代码已review，可以合并</li><li>SGTM: Sounds Good To Me. 和上面那句意思差不多，也是已经通过了 review 的意思</li><li>ACK — acknowledgement, i.e. agreed/accepted change 同意/接受改动</li><li>NACK/NAK —negative acknowledgement, i.e. disagree with change and/or concept 不同意/接受改动</li><li>RFC — request for comments, i.e. I think this is a good idea, lets discuss 我觉得不错，你怎么看？</li><li>AFAIK/AFAICT — as far as I know / can tell 据我所知</li><li>IIRC — if I recall correctly 如果我recall的正确的话</li><li>IANAL — “I am not a lawyer”, but I smell licensing issues</li><li>WIP: Work In Progress, do not merge yet. 传说中提 PR 的最佳实践是，如果你有个改动很大的 PR，可以在写了一部分的情况下先提交，但是在标题里写上 WIP，以告诉项目维护者这个功能还未完成，方便维护者提前 review 部分提交的代码。</li><li>PTAL: Please Take A Look. 你来瞅瞅？用来提示别人来看一下</li><li>TBR: To Be Reviewed. 提示维护者进行 review</li><li>TL;DR: Too Long; Didn’t Read. 太长懒得看。也有很多文档在做简略描述之前会写这么一句</li><li>TBD: To Be Done(or Defined/Discussed/Decided/Determined). 根据语境不同意义有所区别，但一般都是还没搞定的意思</li></ul><p>有些也使用比特币的黑客术语：</p><ul><li>Concept ACK — agree with the concept, but haven’t reviewed the changes 理论上同意，但我还没review过。。。</li><li>utACK (aka. Untested ACK) — agree with the changes and reviewed them, but didn’t test review过并同意改动，但我没测过~~~</li><li>Tested ACK — agree with the changes, reviewed and tested 同意改动，我也review过并测过了</li></ul><p>Reference links:<br><a href="https://farer.org/2017/03/01/code-review-acronyms/" target="_blank" rel="noopener">LGTM? 那些迷之缩写</a><br><a href="https://www.freecodecamp.org/news/what-do-cryptic-github-comments-mean-9c1912bcc0a4/" target="_blank" rel="noopener">What do cryptic Github comments mean?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们Github code review 的时候第一次遇到这些缩写时，一脸懵逼，一无所知脸的偷偷去搜搜是什么意思？&lt;br&gt;
这里整理一下这些缩写都是什么含义，以后我们也可以欢快地装逼了，装作娴熟的司机们来使用缩写来达到提高逼格的效果~~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PR: P
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="SE life" scheme="https://catherineliyuankun.github.io/categories/TECH/SE-life/"/>
    
    
      <category term="abbr" scheme="https://catherineliyuankun.github.io/tags/abbr/"/>
    
      <category term="git" scheme="https://catherineliyuankun.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title> Mac 上优化储存空间</title>
    <link href="https://catherineliyuankun.github.io/2019/07/11/Mac-%E4%B8%8A%E4%BC%98%E5%8C%96%E5%82%A8%E5%AD%98%E7%A9%BA%E9%97%B4/"/>
    <id>https://catherineliyuankun.github.io/2019/07/11/Mac-上优化储存空间/</id>
    <published>2019-07-11T03:08:39.000Z</published>
    <updated>2019-07-11T03:20:33.212Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="https://support.apple.com/zh-cn/guide/system-information/sysp4ee93ca4/mac" target="_blank" rel="noopener">在 Mac 上优化储存空间</a></li></ol><ol start="2"><li><a href="https://support.apple.com/zh-cn/HT206996" target="_blank" rel="noopener">如何释放 Mac 上的储存空间</a></li></ol><ol start="3"><li><a href="https://blog.csdn.net/nynkl/article/details/78050495" target="_blank" rel="noopener">Mac 下清理硬盘空间大小 很实用哦。</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://support.apple.com/zh-cn/guide/system-information/sysp4ee93ca4/mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在 Mac 上优化储存空间&lt;/a
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Tools" scheme="https://catherineliyuankun.github.io/categories/TECH/Tools/"/>
    
    
      <category term="Mac" scheme="https://catherineliyuankun.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>hexo-reference path for link to another blog post</title>
    <link href="https://catherineliyuankun.github.io/2019/07/10/hexo-reference%20path%20for%20link%20to%20another%20blog%20post/"/>
    <id>https://catherineliyuankun.github.io/2019/07/10/hexo-reference path for link to another blog post/</id>
    <published>2019-07-10T08:55:24.000Z</published>
    <updated>2019-07-10T09:31:40.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求">需求</h2><p>Hexo blog里面，需要一篇文章里link到另一篇文章。最好是相对路径，绝对路径容易出错，而且不灵活，一换域名所有的link都不能用了。</p><h2 id="hexo的路径生成">Hexo的路径生成</h2><p>我们可以看到Hexo的路径生成：</p><p>例子1：<br><a href="http://localhost:4000/2019/06/11/BlogName1/" target="_blank" rel="noopener">http://localhost:4000/2019/06/11/BlogName1/</a></p><p>例子2：<br><a href="http://liyuankun.top/2019/06/11/Changing-SSL-port-from-8443-to-443/" target="_blank" rel="noopener">http://liyuankun.top/2019/06/11/Changing-SSL-port-from-8443-to-443/</a></p><blockquote><p>域名：端口/YYYY/MM/DD/BlogName</p></blockquote><blockquote><p>域名/YYYY/MM/DD/BlogName</p></blockquote><p>YYYY/MM/DD 是BlogName的创建时间，date: 2019-06-11 16:55:24</p><h2 id="解决方法">解决方法</h2><p>例子1：</p><p>在BlogName1里面link到BlogName2 的链接就为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">BlogName2</span>](<span class="link">../../../../2019/06/11/BlogName2</span>)</span><br></pre></td></tr></table></figure><p>2019/06/11 必须是BlogName2的date</p><p>例子2：</p><p>本篇文章link到文章“Changing SSL port from 8443 to 443”</p><p>markdown写为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Changing-SSL-port-from-8443-to-443</span>](<span class="link">../../../../2019/06/11/Changing-SSL-port-from-8443-to-443/</span>)</span><br></pre></td></tr></table></figure><p>效果为：<br><a href="../../../../2019/06/11/Changing-SSL-port-from-8443-to-443/">Changing-SSL-port-from-8443-to-443</a></p><h2 id="参考">参考</h2><p><a href="https://markdown-zh.readthedocs.io/en/latest/spanelements/" target="_blank" rel="noopener">Markdown 中文文档 内联元素</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;需求&lt;/h2&gt;
&lt;p&gt;Hexo blog里面，需要一篇文章里link到另一篇文章。最好是相对路径，绝对路径容易出错，而且不灵活，一换域名所有的link都不能用了。&lt;/p&gt;
&lt;h2 id=&quot;hexo的路径生成&quot;&gt;Hexo的路径生成&lt;/h2&gt;
&lt;p&gt;我们可以看
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Hexo" scheme="https://catherineliyuankun.github.io/categories/TECH/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://catherineliyuankun.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://catherineliyuankun.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA:Set git</title>
    <link href="https://catherineliyuankun.github.io/2019/07/10/IntelliJ-IDEA-Set-git/"/>
    <id>https://catherineliyuankun.github.io/2019/07/10/IntelliJ-IDEA-Set-git/</id>
    <published>2019-07-10T08:16:27.000Z</published>
    <updated>2019-07-10T10:23:16.940Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>打开Preference-&gt;Version Control-&gt;Git<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/IntelliJ-IDEA-Set-git/git.png" alt="Git"></p></li><li><p>打开Preference-&gt;Version Control-&gt;GitHub<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/IntelliJ-IDEA-Set-git/github.png" alt="GitHub"></p></li><li><p>打开Preference-&gt;Version Control-&gt;Ignored Files<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/IntelliJ-IDEA-Set-git/Ignored%20Files.png" alt="Ignored Files"></p></li><li><p>添加Unregistered的project<br><a href="../../../../2019/07/10/IntelliJ-IDEA-Unregistered-VCS-root-detected/">IntelliJ IDEA:Unregistered VCS root detected</a></p></li><li><p>可以在IDE最下方使用Version Control工具<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/IntelliJ-IDEA-Set-git/Version%20Control.png" alt="Version Control"></p></li></ol><p>Log branch commit信息</p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/IntelliJ-IDEA-Set-git/log.png" alt="Log"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开Preference-&amp;gt;Version Control-&amp;gt;Git&lt;br&gt;
&lt;img src=&quot;https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/In
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Tools" scheme="https://catherineliyuankun.github.io/categories/TECH/Tools/"/>
    
    
      <category term="IntelliJ" scheme="https://catherineliyuankun.github.io/tags/IntelliJ/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA:Unregistered VCS root detected</title>
    <link href="https://catherineliyuankun.github.io/2019/07/10/IntelliJ-IDEA-Unregistered-VCS-root-detected/"/>
    <id>https://catherineliyuankun.github.io/2019/07/10/IntelliJ-IDEA-Unregistered-VCS-root-detected/</id>
    <published>2019-07-10T03:26:20.000Z</published>
    <updated>2019-07-10T09:09:04.064Z</updated>
    
    <content type="html"><![CDATA[<p>如果还没有配置git，参考<a href="../../../../2019/07/10/IntelliJ-IDEA-Set-git/">IntelliJ-IDEA-Set-git</a>。</p><p>在IntelliJ IDEA导入已有的git项目时，出现warning：</p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/IntelliJ-IDEA-Unregistered-VCS-root-detected/1.png" alt="warning"></p><p>打开Preference-&gt;Version Control，看到Unregistered的project目录：<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/IntelliJ-IDEA-Unregistered-VCS-root-detected/2.png" alt="warning"></p><p>选中要配置的Unregistered的project，点击“+”，然后Apply，解决<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/IntelliJ-IDEA-Unregistered-VCS-root-detected/3.png" alt="warning"></p><p>参考链接：<br><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/360000013600--Unregistered-VCS-root-detected-" target="_blank" rel="noopener">Unregistered VCS root detected </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果还没有配置git，参考&lt;a href=&quot;../../../../2019/07/10/IntelliJ-IDEA-Set-git/&quot;&gt;IntelliJ-IDEA-Set-git&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在IntelliJ IDEA导入已有的git项目时，出现warnin
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Tools" scheme="https://catherineliyuankun.github.io/categories/TECH/Tools/"/>
    
    
      <category term="IntelliJ" scheme="https://catherineliyuankun.github.io/tags/IntelliJ/"/>
    
  </entry>
  
  <entry>
    <title>Server Tomcat v8.0 Server at localhost was unable to start within 180 seconds in Eclipse</title>
    <link href="https://catherineliyuankun.github.io/2019/07/01/Server-Tomcat-v8-0-Server-at-localhost-was-unable-to-start-within-180-seconds-in-Eclipse/"/>
    <id>https://catherineliyuankun.github.io/2019/07/01/Server-Tomcat-v8-0-Server-at-localhost-was-unable-to-start-within-180-seconds-in-Eclipse/</id>
    <published>2019-07-01T07:28:27.000Z</published>
    <updated>2019-07-01T07:52:34.618Z</updated>
    
    <content type="html"><![CDATA[<p>When I run the project in Eclipse, the error shows as:</p><blockquote><p>Server Tomcat v8.0 Server at localhost was unable to start within 180 seconds. If the server requires more time, try increasing the timeout in the server editor.</p></blockquote><p>In servers view，Double click the server you want to set，open the setting window of server，“Timeouts” in the top right corner，modify it:</p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/Server-Tomcat-v8-0-Server-at-localhost-was-unable-to-start-within-180-seconds-in-Eclipse/eclipse.png" alt="server setting"></p><h1 id="the-reference-link">The reference link</h1><p><a href="https://blog.csdn.net/cnham/article/details/6317396" target="_blank" rel="noopener">Eclipse中server启动超时的解决方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When I run the project in Eclipse, the error shows as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Server Tomcat v8.0 Server at localhost was unable to start wit
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Tools" scheme="https://catherineliyuankun.github.io/categories/TECH/Tools/"/>
    
    
      <category term="eclipse" scheme="https://catherineliyuankun.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox Error “kernel driver not installed (rc=-1908)” on macOS</title>
    <link href="https://catherineliyuankun.github.io/2019/07/01/VirtualBox-Error-%E2%80%9Ckernel-driver-not-installed-rc-1908-%E2%80%9D-on-macOS/"/>
    <id>https://catherineliyuankun.github.io/2019/07/01/VirtualBox-Error-“kernel-driver-not-installed-rc-1908-”-on-macOS/</id>
    <published>2019-07-01T06:48:47.000Z</published>
    <updated>2019-07-01T07:22:09.631Z</updated>
    
    <content type="html"><![CDATA[<p>I installed VirtualBox on Macbook Pro to run a new imported VM. Here is what I got when trying to start one:</p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/VirtualBox-Error-%E2%80%9Ckernel-driver-not-installed-rc-1908-%E2%80%9D-on-macOS/Vitualbox%20error1.png" alt="Error1"></p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/VirtualBox-Error-%E2%80%9Ckernel-driver-not-installed-rc-1908-%E2%80%9D-on-macOS/Vitualbox%20error2.png" alt="Error2"></p><p>The error message is quite vague. It says On Linux, open returned ENOENT. What about on macOS? It turns out that I have to explicitly allow VirtualBox in the macOS system preference.</p><p>Go to System Preferences / Security &amp; Privacy.</p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/VirtualBox-Error-%E2%80%9Ckernel-driver-not-installed-rc-1908-%E2%80%9D-on-macOS/Scurity.png" alt="Scurity"></p><p>Click “Allow” in the window below.</p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/VirtualBox-Error-%E2%80%9Ckernel-driver-not-installed-rc-1908-%E2%80%9D-on-macOS/Allow.jpeg" alt="Scurity Allow"></p><p>Now VirtualBox no longer complains about kernel driver.</p><p>Update: some people don’t see this button. According to a comment from Albert Wolszon:</p><blockquote><p>This Allow button section shows up only after first 30 minutes after the installation of VirtualBox. If you have this error and don’t see the button, uninstall VirtualBox, remove its belongings (there are usually some files left) and install it once again, then check this button again.<br>Thanks for the comments!</p></blockquote><p>#The reference Links:<br><a href="https://medium.com/@Aenon/mac-virtualbox-kernel-driver-error-df39e7e10cd8" target="_blank" rel="noopener">Solving VirtualBox “kernel driver not installed (rc=-1908)” Error on macOS</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I installed VirtualBox on Macbook Pro to run a new imported VM. Here is what I got when trying to start one:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://git
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Tools" scheme="https://catherineliyuankun.github.io/categories/TECH/Tools/"/>
    
    
      <category term="VirtualBox" scheme="https://catherineliyuankun.github.io/tags/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title>Changing SSL port from 8443 to 443</title>
    <link href="https://catherineliyuankun.github.io/2019/06/11/Changing-SSL-port-from-8443-to-443/"/>
    <id>https://catherineliyuankun.github.io/2019/06/11/Changing-SSL-port-from-8443-to-443/</id>
    <published>2019-06-11T07:12:44.000Z</published>
    <updated>2019-07-10T09:04:29.083Z</updated>
    
    <content type="html"><![CDATA[<p>My another blogs: <a href="../../../../2019/06/11/Difference-between-HTTPS-Port-443-and-Port-8443/">Difference between HTTPS Port 443 and Port 8443</a> and <a href="../../../../2019/06/11/Changing-SSL-port-from-8443-to-443/">Changing SSL port from 8443 to 443</a></p><p>We modify connector under /Your tomcat folder/conf/server.xml</p><h1 id="modify-non-ssl-http-1-1-connector-to-443-port">modify non-SSL HTTP/1.1 Connector to 443 port</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">maxHttpHeaderSize</span>=<span class="string">"8192"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">"500"</span> <span class="attr">minSpareThreads</span>=<span class="string">"25"</span> <span class="attr">maxSpareThreads</span>=<span class="string">"75"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">enableLookups</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">"443"</span> <span class="attr">acceptCount</span>=<span class="string">"100"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">disableUploadTimeout</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="modify-ssl-http-1-1-connector-from-8443-to-443-port">modify SSL HTTP/1.1 Connector from 8443 to 443 port</h1><p>In the server.xml file you will see a section defining the Tomcat connector for Port 8443.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">scheme</span>=<span class="string">"https"</span> <span class="attr">secure</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clientAuth</span>=<span class="string">"false"</span> <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keystoreFile</span>=<span class="string">"/usr/local/tomcat7/server.keystore"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keystorePass</span>=<span class="string">"Envisi0n"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Add a copy of the connector definition for Port 8443 to the file and simply change the number 8443 in your copy to 443.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"443"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">scheme</span>=<span class="string">"https"</span> <span class="attr">secure</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clientAuth</span>=<span class="string">"false"</span> <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keystoreFile</span>=<span class="string">"/usr/local/tomcat7/server.keystore"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keystorePass</span>=<span class="string">"Envisi0n"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>To disable the standard SSL port in the Apache Web server so that Tomcat can handle the connection, edit the httpd.conf file in the Apache conf directory and remove or comment out the lines that enable SSL in the Apache Web server. dis will be an actual SSL Port 443 definition block or an include statement that calls in another ssl.conf file. After changing the Apache Web server configuration and restarting the Web server, restart Tomcat. You should then be able to connect via https directly to Tomcat.</p><h1 id="modify-ajp-1-3-connector-to-other-port">modify AJP 1.3 Connector to other port</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">redirectPort</span>=<span class="string">"443"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Restart tomcat.</p><h1 id="reference-links">Reference Links:</h1><ul><li><a href="https://www.jamf.com/jamf-nation/discussions/7210/changing-ssl-port-from-8443-to-443" target="_blank" rel="noopener">Changing SSL port from 8443 to 443</a></li><li><a href="https://www.mulesoft.com/tcat/tomcat-ssl" target="_blank" rel="noopener">A Simple Step-By-Step Guide To Apache Tomcat SSL Configuration</a></li><li><a href="https://stackoverflow.com/questions/25743718/tomcat-from-8443-to-443" target="_blank" rel="noopener">Tomcat from 8443 to 443</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;My another blogs: &lt;a href=&quot;../../../../2019/06/11/Difference-between-HTTPS-Port-443-and-Port-8443/&quot;&gt;Difference between HTTPS Port 443 and
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Network" scheme="https://catherineliyuankun.github.io/categories/TECH/Network/"/>
    
      <category term="Servlet/HTTP" scheme="https://catherineliyuankun.github.io/categories/TECH/Network/Servlet-HTTP/"/>
    
    
      <category term="Tomcat" scheme="https://catherineliyuankun.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Difference between HTTPS Port 443 and Port 8443</title>
    <link href="https://catherineliyuankun.github.io/2019/06/11/Difference-between-HTTPS-Port-443-and-Port-8443/"/>
    <id>https://catherineliyuankun.github.io/2019/06/11/Difference-between-HTTPS-Port-443-and-Port-8443/</id>
    <published>2019-06-11T06:35:03.000Z</published>
    <updated>2019-07-10T08:53:22.042Z</updated>
    
    <content type="html"><![CDATA[<p>Has you ever non HTTPS ports 443 or Port 8443? Do you no their differences?</p><p>If you say their only difference is the number “8”, this answer may be not completely right.</p><p>In dis article, we need to learn wat the HTTPS port 443 is, wat the port 8443 is and their differences.</p><h1 id="what-is-the-port-443">What is the Port 443?</h1><p>Teh Port 443, a web browsing port, is primarily used for HTTPS services. It is another type of HTTP that provides encryption and transport over secure ports. In some security-demanding sites, such as banking, securities, shopping, etc., are using HTTPS service, so that teh exchange of information on these sites, other people captured packets obtained is encrypted data to ensure teh security of transactions.</p><h1 id="how-to-configure-port-443">How to configure port 443?</h1><p>Enter the firewall custom IP rules, and add rules.<br>Enter teh name and description (It can be entered for inspection).<br>Set teh packet direction - receive and send, teh other IP address - any address<br>Set teh TCP local port 443 to 443, teh other port 0 to 0. TCP flag for teh SYN, when teh above conditions are met, “pass” to determine<br>In teh list of IP rules, move teh rules of teh TCP protocol on teh first position and select “re-save”.</p><h1 id="what-is-the-port-8443">What is the Port 8443?</h1><p>The port 8443 is the default port that Tomcat use to open SSL text service. The default configuration file used in the port is 8443.</p><p>The Tomcat is a core project in the Jakarta project of the Apache Software Foundation, which is developed by Apache, Sun and several other companies and individuals.</p><p><a href="https://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html" target="_blank" rel="noopener">apache tomcat SSL/TLS Configuration HOW-TO</a></p><p>Teh default https port number is 443, so Tomcat uses 8443 to distinguish dis port.</p><h1 id="teh-configuration-codes-of-port-8443">Teh configuration codes of Port 8443:</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">scheme</span>=<span class="string">"https"</span> <span class="attr">secure</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clientAuth</span>=<span class="string">"false"</span> <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keystoreFile</span>=<span class="string">"/usr/local/tomcat7/server.keystore"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keystorePass</span>=<span class="string">"Envisi0n"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="difference-between-https-port-443-and-port-8443">Difference Between HTTPS Port 443 and Port 8443</h1><p>When teh Tomcat sets teh https port, teh differences of port 8443 and port 443:</p><ul><li>Port 8443 needs to add a port number during the visit, the equivalent of http 8080, not directly through the domain name, you need to add the port number. For example: <a href="https://domainname.com:8443" target="_blank" rel="noopener">https://domainname.com:8443</a>.</li><li>Port 443 can access wifout the need for port number, is the equivalent of http 80. It can directly access through the domain name. Example: <a href="https://domainname.com" target="_blank" rel="noopener">https://domainname.com</a>.</li></ul><h1 id="change-8443-to-443-for-tomcat">Change 8443 to 443 for tomcat</h1><p><a href="../../../../2019/06/11/Changing-SSL-port-from-8443-to-443">Changing SSL port from 8443 to 443</a></p><h1 id="reference-links">Reference Links:</h1><p><a href="https://www.router-switch.com/faq/difference-between-https-port-443-and-8443.html" target="_blank" rel="noopener">Difference between HTTPS Port 443 and Port 8443</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Has you ever non HTTPS ports 443 or Port 8443? Do you no their differences?&lt;/p&gt;
&lt;p&gt;If you say their only difference is the number “8”, th
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Network" scheme="https://catherineliyuankun.github.io/categories/TECH/Network/"/>
    
      <category term="Servlet/HTTP" scheme="https://catherineliyuankun.github.io/categories/TECH/Network/Servlet-HTTP/"/>
    
    
      <category term="Tomcat" scheme="https://catherineliyuankun.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>ComponentDidUpdate setState and Maximum update depth exceeded</title>
    <link href="https://catherineliyuankun.github.io/2019/05/14/ComponentDidUpdate-setState-and-Maximum-update-depth-exceeded/"/>
    <id>https://catherineliyuankun.github.io/2019/05/14/ComponentDidUpdate-setState-and-Maximum-update-depth-exceeded/</id>
    <published>2019-05-14T03:35:14.000Z</published>
    <updated>2019-05-15T07:21:13.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dossierpageindicatorcontainer">DossierPageIndicatorContainer</h1><p>一个简单的显示页面页码的pure component，在切换页面（也就是上一回的页码与这次不同时）会显示，过3s消失。</p><p>Code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LiveMessage &#125; <span class="keyword">from</span> <span class="string">'react-aria-live'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'../../../utils/PerfUtils'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bem &#125; <span class="keyword">from</span> <span class="string">'../../../utils/CssUtils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    selectCurrentPageIndex,</span><br><span class="line">    selectDossierPagesCount,</span><br><span class="line">    selectDossierNavBarTitles,</span><br><span class="line">    selectIsShowPageIndicator</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'../dossierSelectors'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; formatMessage &#125; <span class="keyword">from</span> <span class="string">'../../../utils/Intl/IntlUtils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// component stylesheet</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bemPageIndicator = bem(<span class="string">'DossierPageIndicator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DossierPageIndicatorContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        currentPageIndex: PropTypes.number,</span><br><span class="line">        pageCount: PropTypes.number,</span><br><span class="line">        dossierTitles: PropTypes.array,</span><br><span class="line">        left: PropTypes.number.isRequired, <span class="comment">//The "left" position of this component</span></span><br><span class="line">        isShowPageIndicator: PropTypes.bool</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            show: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.mounted = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.toggleTimer.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidUpdate() &#123;</span><br><span class="line">        <span class="keyword">this</span>.toggleTimer.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUpdate(nextProps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.props.currentPageIndex !== nextProps.currentPageIndex) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                show: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.mounted = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toggleTimer() &#123;</span><br><span class="line">        <span class="comment">// Cancel previous pending 'hiding' action if existing</span></span><br><span class="line">        <span class="built_in">window</span>.clearTimeout(<span class="keyword">this</span>.tmr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Hide in 3s</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state.show) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tmr = <span class="built_in">window</span>.setTimeout(</span><br><span class="line">                () =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.mounted) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.setState(&#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="number">3000</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; currentPageIndex, pageCount, left, dossierTitles, isShowPageIndicator &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> pageInfo = formatMessage(<span class="number">182</span>, <span class="string">'Page &#123;currentPage&#125; of &#123;totalPages&#125;'</span>, &#123;<span class="attr">currentPage</span>: currentPageIndex + <span class="number">1</span>, <span class="attr">totalPages</span>: pageCount&#125;);</span><br><span class="line">        <span class="comment">// currentPageIndex is default to -1 which means not ready</span></span><br><span class="line">        <span class="comment">// we do not want to render the page indicator when the page is not ready</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cls = classNames(bemPageIndicator(), &#123;</span><br><span class="line">            <span class="string">'mstrd-show'</span>: <span class="keyword">this</span>.state.show &amp;&amp; currentPageIndex &gt;= <span class="number">0</span> &amp;&amp; pageCount &gt; <span class="number">0</span> || isShowPageIndicator</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=&#123;cls&#125; style=&#123;&#123;<span class="attr">left</span>: left + <span class="string">'px'</span>&#125;&#125;&gt;</span><br><span class="line">                &#123; pageInfo &#125;</span><br><span class="line">                &#123;!!pageCount &amp;&amp; !!dossierTitles.length &amp;&amp; &lt;LiveMessage message=&#123;`$&#123;dossierTitles[currentPageIndex].name&#125; $&#123;pageInfo&#125;`&#125; aria-live="polite"/&gt; &#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        currentPageIndex: selectCurrentPageIndex(state),</span><br><span class="line">        pageCount: selectDossierPagesCount(state),</span><br><span class="line">        dossierTitles: selectDossierNavBarTitles(state),</span><br><span class="line">        isShowPageIndicator: selectIsShowPageIndicator(state)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, &#123;&#125;)(DossierPageIndicatorContainer);</span><br></pre></td></tr></table></figure><h1 id="报错">报错</h1><p>想增加的效果是： 在第一页（切换上一页）或最后一页（切换下一页）的时候 也显示页码，并且过3s消失。<br>所以修改代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentWillUpdate(nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.currentPageIndex !== nextProps.currentPageIndex || nextProps.currentPageIndex === <span class="number">0</span> || nextProps.currentPageIndex === <span class="keyword">this</span>.props.pageCount - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            show: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的时候报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invariant Violation: Maximum <span class="keyword">update</span> <span class="keyword">depth</span> exceeded. dis can happen <span class="keyword">when</span> a component repeatedly calls setState inside componentWillUpdate <span class="keyword">or</span> componentDidUpdate. React limits teh <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">nested</span> updates <span class="keyword">to</span> prevent infinite loops.</span><br></pre></td></tr></table></figure><p>看文档<a href="https://5c54aa429e16c80007af3cd2--reactjs.netlify.com/docs/react-component.html#unsafe_componentwillupdate" target="_blank" rel="noopener">UNSAFE_componentWillUpdate() react v16.7.0</a> 发现不建议再使用componentWillUpdate，而且不建议在componentWillUpdate里setState.</p><p>而且这个改法会造成只要是在第一页或最后一页的时候就显示页码，而且不会过3s消失。 而不是切换到第一页或最后一页的时候显示页码并过3s消失。<br>所以在另一个响应切换页面的事件里dispatch action 来改变state tree里的isShowPageIndicator的值，来表示这个逻辑。<br>也相应的写好selector和reducer。</p><h1 id="解决">解决</h1><h1 id="reference-links">Reference Links</h1><p><a href="https://5c54aa429e16c80007af3cd2--reactjs.netlify.com/docs/react-component.html#unsafe_componentwillupdate" target="_blank" rel="noopener">UNSAFE_componentWillUpdate() react v16.7.0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dossierpageindicatorcontainer&quot;&gt;DossierPageIndicatorContainer&lt;/h1&gt;
&lt;p&gt;一个简单的显示页面页码的pure component，在切换页面（也就是上一回的页码与这次不同时）会显示，过3s消失。&lt;/p&gt;
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
      <category term="React" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/React/"/>
    
    
      <category term="life cycle" scheme="https://catherineliyuankun.github.io/tags/life-cycle/"/>
    
  </entry>
  
  <entry>
    <title>Can not find the tag library descriptor for .tld</title>
    <link href="https://catherineliyuankun.github.io/2019/05/14/Can-not-find-the-tag-library-descriptor-for-jsp/"/>
    <id>https://catherineliyuankun.github.io/2019/05/14/Can-not-find-the-tag-library-descriptor-for-jsp/</id>
    <published>2019-05-14T03:28:45.000Z</published>
    <updated>2019-06-11T06:54:10.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="problem">Problem</h1><p>Eclipse Photon<br>eclipse web project一直在正常使用，不知哪天。。。突然 Promblems tab 里就冒出了好多error:</p><p><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/Can-not-find-the-tag-library-descriptor-for-jsp/error.png" alt="error"></p><h1 id="solution">Solution</h1><p>基本上把<a href="https://stackoverflow.com/questions/1265309/eclipse-cannot-find-the-tag-library-descriptor-for-custom-tags-not-jstl?rq=1" target="_blank" rel="noopener">Eclipse “cannot find the tag library descriptor” for custom tags (not JSTL!)</a>里的方法都试了一遍，貌似都不管用。。。</p><p>最后打开project的properties：<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/Can-not-find-the-tag-library-descriptor-for-jsp/before.png" alt="before"></p><p>修改后：<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/Can-not-find-the-tag-library-descriptor-for-jsp/after.png" alt="after"></p><p>那些error没了，而且再改回去，貌似也没了。。。<br>有空再详细研究下原因。。。</p><h1 id="reference-links">Reference Links</h1><p><a href="https://stackoverflow.com/questions/1265309/eclipse-cannot-find-the-tag-library-descriptor-for-custom-tags-not-jstl?rq=1" target="_blank" rel="noopener">Eclipse “cannot find the tag library descriptor” for custom tags (not JSTL!)</a></p><p><a href="https://stackoverflow.com/questions/13285826/can-not-find-the-tag-library-descriptor-for-http-java-sun-com-jsp-jstl-core" target="_blank" rel="noopener">Can not find teh tag library descriptor for “http://java.sun.com/jsp/jstl/core”</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;
&lt;p&gt;Eclipse Photon&lt;br&gt;
eclipse web project一直在正常使用，不知哪天。。。突然 Promblems tab 里就冒出了好多error:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Tools" scheme="https://catherineliyuankun.github.io/categories/TECH/Tools/"/>
    
    
      <category term="eclipse" scheme="https://catherineliyuankun.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>&quot;Hexo fs.SyncWriteStream is deprecated&quot;</title>
    <link href="https://catherineliyuankun.github.io/2019/05/13/Hexo-node-28561-DEP0061-DeprecationWarning-fs-SyncWriteStream-is-deprecated/"/>
    <id>https://catherineliyuankun.github.io/2019/05/13/Hexo-node-28561-DEP0061-DeprecationWarning-fs-SyncWriteStream-is-deprecated/</id>
    <published>2019-05-13T07:08:08.000Z</published>
    <updated>2019-05-15T07:19:25.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="problem">Problem</h1><p>NodeJs V8 使用hexo时报错：</p><p>(node:28561) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  Hexo-theme-zilan git:(master) ✗ hexo g</span><br><span class="line">(node:28561) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">TypeError: Cannot set property '</span>lastIndex<span class="string">' of undefined</span></span><br><span class="line"><span class="string">    at highlight (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/highlight.js/lib/highlight.js:511:35)</span></span><br><span class="line"><span class="string">    at /Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/highlight.js/lib/highlight.js:561:21</span></span><br><span class="line"><span class="string">    at Array.forEach (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="string">    at Object.highlightAuto (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/highlight.js/lib/highlight.js:560:40)</span></span><br><span class="line"><span class="string">    at /Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/hexo-util/lib/highlight.js:117:25</span></span><br><span class="line"><span class="string">    at highlight (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/hexo-util/lib/highlight.js:120:7)</span></span><br><span class="line"><span class="string">    at highlightUtil (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/hexo-util/lib/highlight.js:22:14)</span></span><br><span class="line"><span class="string">    at /Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:62:15</span></span><br><span class="line"><span class="string">    at String.replace (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="string">    at Hexo.backtickCodeBlock (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:14:31)</span></span><br><span class="line"><span class="string">    at Hexo.tryCatcher (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class="line"><span class="string">    at Hexo.&lt;anonymous&gt; (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/method.js:15:34)</span></span><br><span class="line"><span class="string">    at Promise.each.filter (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/hexo/lib/extend/filter.js:63:65)</span></span><br><span class="line"><span class="string">    at tryCatcher (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class="line"><span class="string">    at Object.gotValue (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/reduce.js:155:18)</span></span><br><span class="line"><span class="string">    at Object.gotAccum (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/reduce.js:144:25)</span></span><br><span class="line"><span class="string">    at Object.tryCatcher (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class="line"><span class="string">    at Promise._settlePromiseFromHandler (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/promise.js:512:31)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/promise.js:569:18)</span></span><br><span class="line"><span class="string">    at Promise._settlePromiseCtx (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/promise.js:606:10)</span></span><br><span class="line"><span class="string">    at Async._drainQueue (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/async.js:138:12)</span></span><br><span class="line"><span class="string">    at Async._drainQueues (/Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/bluebird/js/release/async.js:143:10)</span></span><br></pre></td></tr></table></figure><h2 id="root-cause">Root cause</h2><p>hexo-fs 老版本里有一行：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exports.SyncWriteStream = fs.SyncWriteStream<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>跟nodejs v8 有冲突。所以要更新 hexo-fs &gt;= ^0.2.0</p><h1 id="solutions">Solutions</h1><h2 id="fix-1-use-old-version-of-nodejs">Fix 1 use old version of nodejs</h2><p>用nvm管理node版本。发现切换node后，zsh: command not found: hexo。<br>重新npm install hexo-cli -g 就好了</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="selector-tag">Hexo-theme-zilan</span> <span class="selector-tag">git</span><span class="selector-pseudo">:(master)</span> ✗ <span class="selector-tag">nvm</span> <span class="selector-tag">list</span></span><br><span class="line">        <span class="selector-tag">v7</span><span class="selector-class">.4</span><span class="selector-class">.0</span></span><br><span class="line"><span class="selector-tag">-</span>&gt;       <span class="selector-tag">v8</span><span class="selector-class">.9</span><span class="selector-class">.1</span></span><br><span class="line">        <span class="selector-tag">v9</span><span class="selector-class">.3</span><span class="selector-class">.0</span></span><br><span class="line">➜  <span class="selector-tag">Hexo-theme-zilan</span> <span class="selector-tag">git</span><span class="selector-pseudo">:(master)</span> ✗ <span class="selector-tag">nvm</span> <span class="selector-tag">use</span> <span class="selector-tag">v7</span><span class="selector-class">.4</span><span class="selector-class">.0</span></span><br><span class="line"><span class="selector-tag">Now</span> <span class="selector-tag">using</span> <span class="selector-tag">node</span> <span class="selector-tag">v7</span><span class="selector-class">.4</span><span class="selector-class">.0</span> (<span class="selector-tag">npm</span> <span class="selector-tag">v4</span><span class="selector-class">.0</span><span class="selector-class">.5</span>)</span><br><span class="line">➜  <span class="selector-tag">Hexo-theme-zilan</span> <span class="selector-tag">git</span><span class="selector-pseudo">:(master)</span> ✗ <span class="selector-tag">npm</span> <span class="selector-tag">install</span></span><br><span class="line">➜  <span class="selector-tag">Hexo-theme-zilan</span> <span class="selector-tag">git</span><span class="selector-pseudo">:(master)</span> ✗ <span class="selector-tag">hexo</span> <span class="selector-tag">g</span></span><br><span class="line"><span class="selector-tag">zsh</span>: <span class="selector-tag">command</span> <span class="selector-tag">not</span> <span class="selector-tag">found</span>: <span class="selector-tag">hexo</span></span><br><span class="line"></span><br><span class="line">➜  <span class="selector-tag">Hexo-theme-zilan</span> <span class="selector-tag">git</span><span class="selector-pseudo">:(master)</span> ✗ <span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">hexo-cli</span> <span class="selector-tag">-g</span></span><br></pre></td></tr></table></figure><h2 id="fix-2-install-hexo-fs">Fix 2 install hexo-fs</h2><p>如果还想使用nodejs &gt; v8, 可以更新hexo-fs</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  Hexo-theme-zilan git:(master) ✗ npm <span class="keyword">install</span> hexo-fs –<span class="keyword">save</span></span><br></pre></td></tr></table></figure><p>试了下还是没解决。。。 Try again, still has the error…</p><h2 id="fix-2-hexo-debug">Fix 2 hexo --debug</h2><p>会发现hexo-deployer-git 里使用了旧版本的hexo-fs，所以造成问题</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  Hexo-theme-zilan git:(master) ✗ hexo --debug</span><br><span class="line">    07:05:51.382 <span class="builtin-name">DEBUG</span> Hexo version: 3.7.1</span><br><span class="line">    07:05:51.385 <span class="builtin-name">DEBUG</span> Working directory: ~/MyOwnGit/Hexo-theme-zilan/</span><br><span class="line">    07:05:51.513 <span class="builtin-name">DEBUG</span><span class="built_in"> Config </span>loaded: ~/MyOwnGit/Hexo-theme-zilan/_config.yml</span><br><span class="line">    07:05:51.579 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-deployer-git</span><br><span class="line">    (node:29976) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br><span class="line">    07:05:51.728 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-fs</span><br><span class="line">    07:05:51.731 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-generator-archive</span><br><span class="line">    07:05:51.733 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-generator-category</span><br><span class="line">    07:05:51.737 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-generator-feed</span><br><span class="line">    07:05:51.738 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-generator-index</span><br><span class="line">    07:05:51.783 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-generator-seo-friendly-sitemap</span><br><span class="line">    07:05:51.784 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-generator-tag</span><br><span class="line">    07:05:51.788 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-renderer-ejs</span><br><span class="line">    07:05:52.277 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-renderer-jade</span><br><span class="line">    07:05:52.278 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-renderer-markdown-it</span><br><span class="line">    07:05:52.280 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-renderer-stylus</span><br><span class="line">    07:05:52.360 <span class="builtin-name">DEBUG</span> Plugin loaded: hexo-server</span><br><span class="line">    07:05:52.364 <span class="builtin-name">DEBUG</span><span class="built_in"> Script </span>loaded: themes/zilan/scripts/fancybox.js</span><br></pre></td></tr></table></figure><h2 id="fix-2-modify-hexo-deployer-git">Fix 2 modify hexo-deployer-git</h2> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  Hexo-theme-zilan git:(master) ✗ npm <span class="keyword">install</span> hexo-deployer-git hexo-serve <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>试了下还是没解决。。。 Try again, still has the error…<br>看了下hexo-deployer-git并没什么更新，只能自己手动改了</p><p>注释掉 /Users/liyuankun/MyOwnGit/Hexo-theme-zilan/node_modules/hexo-deployer-git/node_modules/hexo-fs/lib/fs.js 中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//exports.SyncWriteStream = fs.SyncWriteStream;</span></span><br></pre></td></tr></table></figure><h1 id="reference-links">Reference Links</h1><p><a href="https://github.com/hexojs/hexo/issues/2598" target="_blank" rel="noopener">fs.SyncWriteStream is deprecated [Nodejs v8.0]</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;
&lt;p&gt;NodeJs V8 使用hexo时报错：&lt;/p&gt;
&lt;p&gt;(node:28561) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.&lt;/p
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="Hexo" scheme="https://catherineliyuankun.github.io/categories/TECH/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://catherineliyuankun.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://catherineliyuankun.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>从微信语音or笔记爬取音频</title>
    <link href="https://catherineliyuankun.github.io/2019/04/25/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E8%AF%AD%E9%9F%B3or%E7%AC%94%E8%AE%B0%E7%88%AC%E5%8F%96%E9%9F%B3%E9%A2%91/"/>
    <id>https://catherineliyuankun.github.io/2019/04/25/从微信语音or笔记爬取音频/</id>
    <published>2019-04-25T02:42:46.000Z</published>
    <updated>2019-05-15T07:20:13.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法">方法</h1><p><a href="https://www.zhihu.com/question/30112442/answer/561089000" target="_blank" rel="noopener">Leon 的回答</a>比较符合我的需求, 转化下就是:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">If (MacOS)</span><br><span class="line">    If (语音 <span class="keyword">in</span> 电脑微信窗口记录)</span><br><span class="line">        在聊天窗口找个图片;</span><br><span class="line">        右键--&gt;打开文件夹;</span><br><span class="line">        里面看到的silk文件就是聊天的语音;</span><br><span class="line"></span><br><span class="line">    If (语音 <span class="keyword">not</span> <span class="keyword">in</span> 电脑微信窗口记录)</span><br><span class="line">        收藏(语音);</span><br><span class="line">        播放(语音);</span><br><span class="line">        去到(<span class="string">"/Users/&#123;用户名&#125;/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/"</span>);</span><br><span class="line">        搜索(Favorites目录);</span><br><span class="line">        然后data下面就有silk文件 </span><br><span class="line">        使用[kn007/silk-v3-decoder](https://github.com/kn007/silk-v3-decoder)</span><br><span class="line">            &gt; brew install lame</span><br><span class="line">            &gt; brew install ffmpeg  --enable-libmp3lame</span><br><span class="line"></span><br><span class="line">        将silk文件转为wav</span><br><span class="line">            &gt; silk-v3-decoder/converter.sh ab.silk wav</span><br><span class="line"></span><br><span class="line">    If (语音 <span class="keyword">in</span> 电脑微信窗口记录的链接内)</span><br><span class="line">        open(链接);</span><br><span class="line">        播放(语音);</span><br><span class="line">        去到(<span class="string">"/Users/&#123;用户名&#125;/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/"</span>);</span><br><span class="line">        搜索(⁨OpenData⁩);</span><br><span class="line">        下面的某个文件里的音频.wav文件</span><br><span class="line">        例如:Macintosh HD⁩ ▸ ⁨Users⁩ ▸ ⁨muzilan⁩ ▸ ⁨Library⁩ ▸ ⁨Containers⁩ ▸ ⁨com.tencent.xinWeChat⁩ ▸ ⁨Data⁩ ▸ ⁨Library⁩ ▸ ⁨Application Support⁩ ▸ ⁨com.tencent.xinWeChat⁩ ▸ ⁨<span class="number">2.0b4</span>.0.9⁩ ▸ ⁨f68564a536bd7f4613c075bf2be66c8e⁩ ▸ ⁨Message⁩ ▸ ⁨MessageTemp⁩ ▸ ⁨9e20f478899dc29eb19741386f9343c8⁩ ▸ ⁨OpenData⁩ ▸ ⁨<span class="number">177</span>⁩▸a8b51cec5109b6774a1efcac305692c4.wav</span><br><span class="line">        直接拷贝;</span><br><span class="line"></span><br><span class="line">        搜索(⁨Audio);</span><br><span class="line">        下面的某个文件里的音频.silk文件</span><br><span class="line">        例如:‎⁨ Macintosh HD⁩ ▸ ⁨Users⁩ ▸ ⁨muzilan⁩ ▸ ⁨Library⁩ ▸ ⁨Containers⁩ ▸ ⁨com.tencent.xinWeChat⁩ ▸ ⁨Data⁩ ▸ ⁨Library⁩ ▸ ⁨Application Support⁩ ▸ ⁨com.tencent.xinWeChat⁩ ▸ ⁨<span class="number">2.0b4</span>.0.9⁩ ▸ ⁨f68564a536bd7f4613c075bf2be66c8e⁩ ▸ ⁨Message⁩ ▸ ⁨MessageTemp⁩ ▸ ⁨fce9f67a422f2c52cee716585240bf41⁩ ▸ ⁨Audio ▸ <span class="number">111.</span>aud.silk</span><br><span class="line"></span><br><span class="line">        使用[kn007/silk-v3-decoder](https://github.com/kn007/silk-v3-decoder)</span><br><span class="line">            &gt; brew install lame</span><br><span class="line">            &gt; brew install ffmpeg  --enable-libmp3lame</span><br><span class="line"></span><br><span class="line">        将silk文件转为wav</span><br><span class="line">            &gt; silk-v3-decoder/converter.sh ab.silk wav</span><br><span class="line"></span><br><span class="line">        Or 按修改时间排序，最近被改的文件夹</span><br><span class="line">        ‎⁨Macintosh HD⁩ ▸ ⁨Users⁩ ▸ ⁨muzilan⁩ ▸ ⁨Library⁩ ▸ ⁨Containers⁩ ▸ ⁨com.tencent.xinWeChat⁩ ▸ ⁨Data⁩ ▸ ⁨Library⁩ ▸ ⁨Application Support⁩ ▸ ⁨com.tencent.xinWeChat⁩ ▸ ⁨<span class="number">2.0b4</span>.0.9⁩ ▸ ⁨f68564a536bd7f4613c075bf2be66c8e⁩ ▸ ⁨Message⁩ ▸ ⁨MessageTemp</span><br></pre></td></tr></table></figure><h1 id="参考链接">参考链接</h1><p><a href="https://www.zhihu.com/question/30112442" target="_blank" rel="noopener">知乎: 如何导出微信【收藏】中的语音文件？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方法&quot;&gt;方法&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/30112442/answer/561089000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leon 的回答&lt;/a&gt;比较符合我的需
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
    
      <category term="Weixin" scheme="https://catherineliyuankun.github.io/tags/Weixin/"/>
    
  </entry>
  
  <entry>
    <title>从微信链接爬取音频</title>
    <link href="https://catherineliyuankun.github.io/2019/04/24/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E9%93%BE%E6%8E%A5-mpvoice-%E7%88%AC%E5%8F%96%E9%9F%B3%E9%A2%91/"/>
    <id>https://catherineliyuankun.github.io/2019/04/24/从微信链接-mpvoice-爬取音频/</id>
    <published>2019-04-24T09:04:14.000Z</published>
    <updated>2019-04-25T02:35:49.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="故事是这样的">故事是这样的</h1><p>报名了某英语课程, 进群后老师会发微信课程链接, 链接里有音频视频等. 我就想做笔记把这个文字和音频视频内容保存下来.</p><h1 id="看代码去">看代码去</h1><p>微信链接在浏览器打开, 视频的很好找 <code>&lt;video origin_src=&quot;里面的就是视频的链接&quot;&gt;</code> , 把链接直接粘贴到浏览器里就好了,右键save as 就可以保存下来了.<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E9%93%BE%E6%8E%A5-mpvoice-%E7%88%AC%E5%8F%96%E9%9F%B3%E9%A2%91/%E8%A7%86%E9%A2%91.png" alt="视频"></p><p>有的音频的资源source也很好找, <code>&lt;audio src=&quot;里面的就是视频的链接&quot;&gt;</code>, 把链接直接粘贴到浏览器里就好了,右键save as 就可以保存下来了.<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E9%93%BE%E6%8E%A5-mpvoice-%E7%88%AC%E5%8F%96%E9%9F%B3%E9%A2%91/%E9%9F%B3%E9%A2%911.png" alt="音频1"></p><p>但是后来遇到了个看不出直接source的<code>&lt;mpvoice&gt;</code>, 应该是微信的自定义html标签. 随便在网上一搜, 就看到了跟我一样目的童鞋, 哈哈.<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E9%93%BE%E6%8E%A5-mpvoice-%E7%88%AC%E5%8F%96%E9%9F%B3%E9%A2%91/%E9%9F%B3%E9%A2%912.png" alt="音频2"></p><p>按照他的方法试了, 果然可以. Network中有获取media的请求 (开发者工具 --&gt; Network —&gt; “media” tab). 而且<code>&lt;mpvoice&gt;</code>标签上voice_encode_fileid属性的值就是mediaid的值。同样的粘贴链接&quot;<a href="https://res.wx.qq.com/voice/getvoice?mediaid=MzI1NDMxNTIxNF8xMDAwMDIxNjg=" target="_blank" rel="noopener">https://res.wx.qq.com/voice/getvoice?mediaid=MzI1NDMxNTIxNF8xMDAwMDIxNjg=</a>&quot;到浏览器里就好了,右键save as 就可以保存下来了.<br><img src="https://github.com/CatherineLiyuankun/PictureBed/raw/master/blog/post/%E4%BB%8E%E5%BE%AE%E4%BF%A1%E9%93%BE%E6%8E%A5-mpvoice-%E7%88%AC%E5%8F%96%E9%9F%B3%E9%A2%91/request.png" alt="request"></p><h1 id="todo-写个脚本自动爬">Todo 写个脚本自动爬</h1><h1 id="参考文章">参考文章</h1><p><a href="http://haijd.tech/golang/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%BB%E8%BE%91%E8%8B%B1%E8%AF%AD%E9%9F%B3%E9%A2%91%E5%B0%8F%E7%88%AC%E8%99%AB/" target="_blank" rel="noopener">一个简单的逻辑英语音频小爬虫</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;故事是这样的&quot;&gt;故事是这样的&lt;/h1&gt;
&lt;p&gt;报名了某英语课程, 进群后老师会发微信课程链接, 链接里有音频视频等. 我就想做笔记把这个文字和音频视频内容保存下来.&lt;/p&gt;
&lt;h1 id=&quot;看代码去&quot;&gt;看代码去&lt;/h1&gt;
&lt;p&gt;微信链接在浏览器打开, 视频的很好找
      
    
    </summary>
    
      <category term="TECH" scheme="https://catherineliyuankun.github.io/categories/TECH/"/>
    
      <category term="FrontEnd" scheme="https://catherineliyuankun.github.io/categories/TECH/FrontEnd/"/>
    
    
      <category term="Weixin" scheme="https://catherineliyuankun.github.io/tags/Weixin/"/>
    
      <category term="&lt;mpvoice&gt;" scheme="https://catherineliyuankun.github.io/tags/mpvoice/"/>
    
  </entry>
  
</feed>
